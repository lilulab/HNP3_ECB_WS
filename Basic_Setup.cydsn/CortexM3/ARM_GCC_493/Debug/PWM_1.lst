ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"PWM_1.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.PWM_1_Enable,"ax",%progbits
  19              		.align	2
  20              		.global	PWM_1_Enable
  21              		.thumb
  22              		.thumb_func
  23              		.type	PWM_1_Enable, %function
  24              	PWM_1_Enable:
  25              	.LFB2:
  26              		.file 1 "Generated_Source\\PSoC5\\PWM_1.c"
   1:Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/PWM_1.c **** * File Name: PWM_1.c
   3:Generated_Source\PSoC5/PWM_1.c **** * Version 3.30
   4:Generated_Source\PSoC5/PWM_1.c **** *
   5:Generated_Source\PSoC5/PWM_1.c **** * Description:
   6:Generated_Source\PSoC5/PWM_1.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:Generated_Source\PSoC5/PWM_1.c **** *  comparitors. Each instance of this user module is capable of generating
   8:Generated_Source\PSoC5/PWM_1.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:Generated_Source\PSoC5/PWM_1.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:Generated_Source\PSoC5/PWM_1.c **** *  The compare value output may be configured to be active when the present
  11:Generated_Source\PSoC5/PWM_1.c **** *  counter is less than or less than/equal to the compare value.
  12:Generated_Source\PSoC5/PWM_1.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:Generated_Source\PSoC5/PWM_1.c **** *  width wide when the counter is equal to zero.
  14:Generated_Source\PSoC5/PWM_1.c **** *
  15:Generated_Source\PSoC5/PWM_1.c **** * Note:
  16:Generated_Source\PSoC5/PWM_1.c **** *
  17:Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************
  18:Generated_Source\PSoC5/PWM_1.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:Generated_Source\PSoC5/PWM_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:Generated_Source\PSoC5/PWM_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:Generated_Source\PSoC5/PWM_1.c **** * the software package with which this file was provided.
  22:Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************/
  23:Generated_Source\PSoC5/PWM_1.c **** 
  24:Generated_Source\PSoC5/PWM_1.c **** #include "PWM_1.h"
  25:Generated_Source\PSoC5/PWM_1.c **** 
  26:Generated_Source\PSoC5/PWM_1.c **** /* Error message for removed <resource> through optimization */
  27:Generated_Source\PSoC5/PWM_1.c **** #ifdef PWM_1_PWMUDB_genblk1_ctrlreg__REMOVED
  28:Generated_Source\PSoC5/PWM_1.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:Generated_Source\PSoC5/PWM_1.c ****          constant 1 for reset. This will prevent the component from operating.
  30:Generated_Source\PSoC5/PWM_1.c **** #endif /* PWM_1_PWMUDB_genblk1_ctrlreg__REMOVED */
  31:Generated_Source\PSoC5/PWM_1.c **** 
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 2


  32:Generated_Source\PSoC5/PWM_1.c **** uint8 PWM_1_initVar = 0u;
  33:Generated_Source\PSoC5/PWM_1.c **** 
  34:Generated_Source\PSoC5/PWM_1.c **** 
  35:Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
  36:Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_Start
  37:Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
  38:Generated_Source\PSoC5/PWM_1.c **** *
  39:Generated_Source\PSoC5/PWM_1.c **** * Summary:
  40:Generated_Source\PSoC5/PWM_1.c **** *  The start function initializes the pwm with the default values, the
  41:Generated_Source\PSoC5/PWM_1.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:Generated_Source\PSoC5/PWM_1.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:Generated_Source\PSoC5/PWM_1.c **** *
  44:Generated_Source\PSoC5/PWM_1.c **** * Parameters:
  45:Generated_Source\PSoC5/PWM_1.c **** *  None
  46:Generated_Source\PSoC5/PWM_1.c **** *
  47:Generated_Source\PSoC5/PWM_1.c **** * Return:
  48:Generated_Source\PSoC5/PWM_1.c **** *  None
  49:Generated_Source\PSoC5/PWM_1.c **** *
  50:Generated_Source\PSoC5/PWM_1.c **** * Global variables:
  51:Generated_Source\PSoC5/PWM_1.c **** *  PWM_1_initVar: Is modified when this function is called for the
  52:Generated_Source\PSoC5/PWM_1.c **** *   first time. Is used to ensure that initialization happens only once.
  53:Generated_Source\PSoC5/PWM_1.c **** *
  54:Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
  55:Generated_Source\PSoC5/PWM_1.c **** void PWM_1_Start(void) 
  56:Generated_Source\PSoC5/PWM_1.c **** {
  57:Generated_Source\PSoC5/PWM_1.c ****     /* If not Initialized then initialize all required hardware and software */
  58:Generated_Source\PSoC5/PWM_1.c ****     if(PWM_1_initVar == 0u)
  59:Generated_Source\PSoC5/PWM_1.c ****     {
  60:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_Init();
  61:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_initVar = 1u;
  62:Generated_Source\PSoC5/PWM_1.c ****     }
  63:Generated_Source\PSoC5/PWM_1.c ****     PWM_1_Enable();
  64:Generated_Source\PSoC5/PWM_1.c **** 
  65:Generated_Source\PSoC5/PWM_1.c **** }
  66:Generated_Source\PSoC5/PWM_1.c **** 
  67:Generated_Source\PSoC5/PWM_1.c **** 
  68:Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
  69:Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_Init
  70:Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
  71:Generated_Source\PSoC5/PWM_1.c **** *
  72:Generated_Source\PSoC5/PWM_1.c **** * Summary:
  73:Generated_Source\PSoC5/PWM_1.c **** *  Initialize component's parameters to the parameters set by user in the
  74:Generated_Source\PSoC5/PWM_1.c **** *  customizer of the component placed onto schematic. Usually called in
  75:Generated_Source\PSoC5/PWM_1.c **** *  PWM_1_Start().
  76:Generated_Source\PSoC5/PWM_1.c **** *
  77:Generated_Source\PSoC5/PWM_1.c **** * Parameters:
  78:Generated_Source\PSoC5/PWM_1.c **** *  None
  79:Generated_Source\PSoC5/PWM_1.c **** *
  80:Generated_Source\PSoC5/PWM_1.c **** * Return:
  81:Generated_Source\PSoC5/PWM_1.c **** *  None
  82:Generated_Source\PSoC5/PWM_1.c **** *
  83:Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
  84:Generated_Source\PSoC5/PWM_1.c **** void PWM_1_Init(void) 
  85:Generated_Source\PSoC5/PWM_1.c **** {
  86:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UsingFixedFunction || PWM_1_UseControl)
  87:Generated_Source\PSoC5/PWM_1.c ****         uint8 ctrl;
  88:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction || PWM_1_UseControl) */
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 3


  89:Generated_Source\PSoC5/PWM_1.c **** 
  90:Generated_Source\PSoC5/PWM_1.c ****     #if(!PWM_1_UsingFixedFunction)
  91:Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UseStatus)
  92:Generated_Source\PSoC5/PWM_1.c ****             /* Interrupt State Backup for Critical Region*/
  93:Generated_Source\PSoC5/PWM_1.c ****             uint8 PWM_1_interruptState;
  94:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UseStatus) */
  95:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (!PWM_1_UsingFixedFunction) */
  96:Generated_Source\PSoC5/PWM_1.c **** 
  97:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UsingFixedFunction)
  98:Generated_Source\PSoC5/PWM_1.c ****         /* You are allowed to write the compare value (FF only) */
  99:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL |= PWM_1_CFG0_MODE;
 100:Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_DeadBand2_4)
 101:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_CONTROL |= PWM_1_CFG0_DB;
 102:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_DeadBand2_4) */
 103:Generated_Source\PSoC5/PWM_1.c **** 
 104:Generated_Source\PSoC5/PWM_1.c ****         ctrl = PWM_1_CONTROL3 & ((uint8 )(~PWM_1_CTRL_CMPMODE1_MASK));
 105:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL3 = ctrl | PWM_1_DEFAULT_COMPARE1_MODE;
 106:Generated_Source\PSoC5/PWM_1.c **** 
 107:Generated_Source\PSoC5/PWM_1.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_RT1 &= ((uint8)(~PWM_1_RT1_MASK));
 109:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_RT1 |= PWM_1_SYNC;
 110:Generated_Source\PSoC5/PWM_1.c **** 
 111:Generated_Source\PSoC5/PWM_1.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_RT1 &= ((uint8)(~PWM_1_SYNCDSI_MASK));
 113:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_RT1 |= PWM_1_SYNCDSI_EN;
 114:Generated_Source\PSoC5/PWM_1.c **** 
 115:Generated_Source\PSoC5/PWM_1.c ****     #elif (PWM_1_UseControl)
 116:Generated_Source\PSoC5/PWM_1.c ****         /* Set the default compare mode defined in the parameter */
 117:Generated_Source\PSoC5/PWM_1.c ****         ctrl = PWM_1_CONTROL & ((uint8)(~PWM_1_CTRL_CMPMODE2_MASK)) &
 118:Generated_Source\PSoC5/PWM_1.c ****                 ((uint8)(~PWM_1_CTRL_CMPMODE1_MASK));
 119:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL = ctrl | PWM_1_DEFAULT_COMPARE2_MODE |
 120:Generated_Source\PSoC5/PWM_1.c ****                                    PWM_1_DEFAULT_COMPARE1_MODE;
 121:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 122:Generated_Source\PSoC5/PWM_1.c **** 
 123:Generated_Source\PSoC5/PWM_1.c ****     #if (!PWM_1_UsingFixedFunction)
 124:Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_Resolution == 8)
 125:Generated_Source\PSoC5/PWM_1.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_AUX_CONTROLDP0 |= (PWM_1_AUX_CTRL_FIFO0_CLR);
 127:Generated_Source\PSoC5/PWM_1.c ****         #else /* (PWM_1_Resolution == 16)*/
 128:Generated_Source\PSoC5/PWM_1.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_AUX_CONTROLDP0 |= (PWM_1_AUX_CTRL_FIFO0_CLR);
 130:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_AUX_CONTROLDP1 |= (PWM_1_AUX_CTRL_FIFO0_CLR);
 131:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_Resolution == 8) */
 132:Generated_Source\PSoC5/PWM_1.c **** 
 133:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_WriteCounter(PWM_1_INIT_PERIOD_VALUE);
 134:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (!PWM_1_UsingFixedFunction) */
 135:Generated_Source\PSoC5/PWM_1.c **** 
 136:Generated_Source\PSoC5/PWM_1.c ****     PWM_1_WritePeriod(PWM_1_INIT_PERIOD_VALUE);
 137:Generated_Source\PSoC5/PWM_1.c **** 
 138:Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_UseOneCompareMode)
 139:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_WriteCompare(PWM_1_INIT_COMPARE_VALUE1);
 140:Generated_Source\PSoC5/PWM_1.c ****         #else
 141:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_WriteCompare1(PWM_1_INIT_COMPARE_VALUE1);
 142:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_WriteCompare2(PWM_1_INIT_COMPARE_VALUE2);
 143:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UseOneCompareMode) */
 144:Generated_Source\PSoC5/PWM_1.c **** 
 145:Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_KillModeMinTime)
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 4


 146:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_WriteKillTime(PWM_1_MinimumKillTime);
 147:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_KillModeMinTime) */
 148:Generated_Source\PSoC5/PWM_1.c **** 
 149:Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_DeadBandUsed)
 150:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_WriteDeadTime(PWM_1_INIT_DEAD_TIME);
 151:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_DeadBandUsed) */
 152:Generated_Source\PSoC5/PWM_1.c **** 
 153:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UseStatus || PWM_1_UsingFixedFunction)
 154:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_SetInterruptMode(PWM_1_INIT_INTERRUPTS_MODE);
 155:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UseStatus || PWM_1_UsingFixedFunction) */
 156:Generated_Source\PSoC5/PWM_1.c **** 
 157:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UsingFixedFunction)
 158:Generated_Source\PSoC5/PWM_1.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_GLOBAL_ENABLE |= PWM_1_BLOCK_EN_MASK;
 160:Generated_Source\PSoC5/PWM_1.c ****         /* Set the Interrupt source to come from the status register */
 161:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL2 |= PWM_1_CTRL2_IRQ_SEL;
 162:Generated_Source\PSoC5/PWM_1.c ****     #else
 163:Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UseStatus)
 164:Generated_Source\PSoC5/PWM_1.c **** 
 165:Generated_Source\PSoC5/PWM_1.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:Generated_Source\PSoC5/PWM_1.c ****             /* Enter Critical Region*/
 167:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_interruptState = CyEnterCriticalSection();
 168:Generated_Source\PSoC5/PWM_1.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_STATUS_AUX_CTRL |= PWM_1_STATUS_ACTL_INT_EN_MASK;
 170:Generated_Source\PSoC5/PWM_1.c **** 
 171:Generated_Source\PSoC5/PWM_1.c ****              /* Exit Critical Region*/
 172:Generated_Source\PSoC5/PWM_1.c ****             CyExitCriticalSection(PWM_1_interruptState);
 173:Generated_Source\PSoC5/PWM_1.c **** 
 174:Generated_Source\PSoC5/PWM_1.c ****             /* Clear the FIFO to enable the PWM_1_STATUS_FIFOFULL
 175:Generated_Source\PSoC5/PWM_1.c ****                    bit to be set on FIFO full. */
 176:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_ClearFIFO();
 177:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UseStatus) */
 178:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 179:Generated_Source\PSoC5/PWM_1.c **** }
 180:Generated_Source\PSoC5/PWM_1.c **** 
 181:Generated_Source\PSoC5/PWM_1.c **** 
 182:Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
 183:Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_Enable
 184:Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
 185:Generated_Source\PSoC5/PWM_1.c **** *
 186:Generated_Source\PSoC5/PWM_1.c **** * Summary:
 187:Generated_Source\PSoC5/PWM_1.c **** *  Enables the PWM block operation
 188:Generated_Source\PSoC5/PWM_1.c **** *
 189:Generated_Source\PSoC5/PWM_1.c **** * Parameters:
 190:Generated_Source\PSoC5/PWM_1.c **** *  None
 191:Generated_Source\PSoC5/PWM_1.c **** *
 192:Generated_Source\PSoC5/PWM_1.c **** * Return:
 193:Generated_Source\PSoC5/PWM_1.c **** *  None
 194:Generated_Source\PSoC5/PWM_1.c **** *
 195:Generated_Source\PSoC5/PWM_1.c **** * Side Effects:
 196:Generated_Source\PSoC5/PWM_1.c **** *  This works only if software enable mode is chosen
 197:Generated_Source\PSoC5/PWM_1.c **** *
 198:Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
 199:Generated_Source\PSoC5/PWM_1.c **** void PWM_1_Enable(void) 
 200:Generated_Source\PSoC5/PWM_1.c **** {
  27              		.loc 1 200 0
  28              		.cfi_startproc
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 5


  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 201:Generated_Source\PSoC5/PWM_1.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UsingFixedFunction)
 203:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_GLOBAL_ENABLE |= PWM_1_BLOCK_EN_MASK;
 204:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_GLOBAL_STBY_ENABLE |= PWM_1_BLOCK_STBY_EN_MASK;
 205:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 206:Generated_Source\PSoC5/PWM_1.c **** 
 207:Generated_Source\PSoC5/PWM_1.c ****     /* Enable the PWM from the control register  */
 208:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UseControl || PWM_1_UsingFixedFunction)
 209:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL |= PWM_1_CTRL_ENABLE;
  32              		.loc 1 209 0
  33 0000 024A     		ldr	r2, .L2
  34 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  35 0004 43F08003 		orr	r3, r3, #128
  36 0008 1370     		strb	r3, [r2]
  37 000a 7047     		bx	lr
  38              	.L3:
  39              		.align	2
  40              	.L2:
  41 000c 7D640040 		.word	1073767549
  42              		.cfi_endproc
  43              	.LFE2:
  44              		.size	PWM_1_Enable, .-PWM_1_Enable
  45              		.section	.text.PWM_1_Stop,"ax",%progbits
  46              		.align	2
  47              		.global	PWM_1_Stop
  48              		.thumb
  49              		.thumb_func
  50              		.type	PWM_1_Stop, %function
  51              	PWM_1_Stop:
  52              	.LFB3:
 210:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UseControl || PWM_1_UsingFixedFunction) */
 211:Generated_Source\PSoC5/PWM_1.c **** }
 212:Generated_Source\PSoC5/PWM_1.c **** 
 213:Generated_Source\PSoC5/PWM_1.c **** 
 214:Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
 215:Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_Stop
 216:Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
 217:Generated_Source\PSoC5/PWM_1.c **** *
 218:Generated_Source\PSoC5/PWM_1.c **** * Summary:
 219:Generated_Source\PSoC5/PWM_1.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:Generated_Source\PSoC5/PWM_1.c **** *  interrupts.
 221:Generated_Source\PSoC5/PWM_1.c **** *
 222:Generated_Source\PSoC5/PWM_1.c **** * Parameters:
 223:Generated_Source\PSoC5/PWM_1.c **** *  None
 224:Generated_Source\PSoC5/PWM_1.c **** *
 225:Generated_Source\PSoC5/PWM_1.c **** * Return:
 226:Generated_Source\PSoC5/PWM_1.c **** *  None
 227:Generated_Source\PSoC5/PWM_1.c **** *
 228:Generated_Source\PSoC5/PWM_1.c **** * Side Effects:
 229:Generated_Source\PSoC5/PWM_1.c **** *  If the Enable mode is set to Hardware only then this function
 230:Generated_Source\PSoC5/PWM_1.c **** *  has no effect on the operation of the PWM
 231:Generated_Source\PSoC5/PWM_1.c **** *
 232:Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
 233:Generated_Source\PSoC5/PWM_1.c **** void PWM_1_Stop(void) 
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 6


 234:Generated_Source\PSoC5/PWM_1.c **** {
  53              		.loc 1 234 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
 235:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UseControl || PWM_1_UsingFixedFunction)
 236:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_CONTROL &= ((uint8)(~PWM_1_CTRL_ENABLE));
  58              		.loc 1 236 0
  59 0000 024A     		ldr	r2, .L5
  60 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  61 0004 03F07F03 		and	r3, r3, #127
  62 0008 1370     		strb	r3, [r2]
  63 000a 7047     		bx	lr
  64              	.L6:
  65              		.align	2
  66              	.L5:
  67 000c 7D640040 		.word	1073767549
  68              		.cfi_endproc
  69              	.LFE3:
  70              		.size	PWM_1_Stop, .-PWM_1_Stop
  71              		.section	.text.PWM_1_WriteCounter,"ax",%progbits
  72              		.align	2
  73              		.global	PWM_1_WriteCounter
  74              		.thumb
  75              		.thumb_func
  76              		.type	PWM_1_WriteCounter, %function
  77              	PWM_1_WriteCounter:
  78              	.LFB4:
 237:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UseControl || PWM_1_UsingFixedFunction) */
 238:Generated_Source\PSoC5/PWM_1.c **** 
 239:Generated_Source\PSoC5/PWM_1.c ****     /* Globally disable the Fixed Function Block chosen */
 240:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UsingFixedFunction)
 241:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_GLOBAL_ENABLE &= ((uint8)(~PWM_1_BLOCK_EN_MASK));
 242:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM_1_BLOCK_STBY_EN_MASK));
 243:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 244:Generated_Source\PSoC5/PWM_1.c **** }
 245:Generated_Source\PSoC5/PWM_1.c **** 
 246:Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_UseOneCompareMode)
 247:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_CompareMode1SW)
 248:Generated_Source\PSoC5/PWM_1.c **** 
 249:Generated_Source\PSoC5/PWM_1.c **** 
 250:Generated_Source\PSoC5/PWM_1.c ****         /*******************************************************************************
 251:Generated_Source\PSoC5/PWM_1.c ****         * Function Name: PWM_1_SetCompareMode
 252:Generated_Source\PSoC5/PWM_1.c ****         ********************************************************************************
 253:Generated_Source\PSoC5/PWM_1.c ****         *
 254:Generated_Source\PSoC5/PWM_1.c ****         * Summary:
 255:Generated_Source\PSoC5/PWM_1.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:Generated_Source\PSoC5/PWM_1.c ****         *  Center Align Mode or One Output Mode.
 257:Generated_Source\PSoC5/PWM_1.c ****         *
 258:Generated_Source\PSoC5/PWM_1.c ****         * Parameters:
 259:Generated_Source\PSoC5/PWM_1.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:Generated_Source\PSoC5/PWM_1.c ****         *                defined in the H file as input arguments.
 261:Generated_Source\PSoC5/PWM_1.c ****         *
 262:Generated_Source\PSoC5/PWM_1.c ****         * Return:
 263:Generated_Source\PSoC5/PWM_1.c ****         *  None
 264:Generated_Source\PSoC5/PWM_1.c ****         *
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 7


 265:Generated_Source\PSoC5/PWM_1.c ****         *******************************************************************************/
 266:Generated_Source\PSoC5/PWM_1.c ****         void PWM_1_SetCompareMode(uint8 comparemode) 
 267:Generated_Source\PSoC5/PWM_1.c ****         {
 268:Generated_Source\PSoC5/PWM_1.c ****             #if(PWM_1_UsingFixedFunction)
 269:Generated_Source\PSoC5/PWM_1.c **** 
 270:Generated_Source\PSoC5/PWM_1.c ****                 #if(0 != PWM_1_CTRL_CMPMODE1_SHIFT)
 271:Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE1_SH
 272:Generated_Source\PSoC5/PWM_1.c ****                 #else
 273:Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemodemasked = comparemode;
 274:Generated_Source\PSoC5/PWM_1.c ****                 #endif /* (0 != PWM_1_CTRL_CMPMODE1_SHIFT) */
 275:Generated_Source\PSoC5/PWM_1.c **** 
 276:Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL3 &= ((uint8)(~PWM_1_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
 277:Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL3 |= comparemodemasked;
 278:Generated_Source\PSoC5/PWM_1.c **** 
 279:Generated_Source\PSoC5/PWM_1.c ****             #elif (PWM_1_UseControl)
 280:Generated_Source\PSoC5/PWM_1.c **** 
 281:Generated_Source\PSoC5/PWM_1.c ****                 #if(0 != PWM_1_CTRL_CMPMODE1_SHIFT)
 282:Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE1_S
 283:Generated_Source\PSoC5/PWM_1.c ****                                                 PWM_1_CTRL_CMPMODE1_MASK;
 284:Generated_Source\PSoC5/PWM_1.c ****                 #else
 285:Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemode1masked = comparemode & PWM_1_CTRL_CMPMODE1_MASK;
 286:Generated_Source\PSoC5/PWM_1.c ****                 #endif /* (0 != PWM_1_CTRL_CMPMODE1_SHIFT) */
 287:Generated_Source\PSoC5/PWM_1.c **** 
 288:Generated_Source\PSoC5/PWM_1.c ****                 #if(0 != PWM_1_CTRL_CMPMODE2_SHIFT)
 289:Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE2_S
 290:Generated_Source\PSoC5/PWM_1.c ****                                                PWM_1_CTRL_CMPMODE2_MASK;
 291:Generated_Source\PSoC5/PWM_1.c ****                 #else
 292:Generated_Source\PSoC5/PWM_1.c ****                     uint8 comparemode2masked = comparemode & PWM_1_CTRL_CMPMODE2_MASK;
 293:Generated_Source\PSoC5/PWM_1.c ****                 #endif /* (0 != PWM_1_CTRL_CMPMODE2_SHIFT) */
 294:Generated_Source\PSoC5/PWM_1.c **** 
 295:Generated_Source\PSoC5/PWM_1.c ****                 /*Clear existing mode */
 296:Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL &= ((uint8)(~(PWM_1_CTRL_CMPMODE1_MASK |
 297:Generated_Source\PSoC5/PWM_1.c ****                                             PWM_1_CTRL_CMPMODE2_MASK)));
 298:Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL |= (comparemode1masked | comparemode2masked);
 299:Generated_Source\PSoC5/PWM_1.c **** 
 300:Generated_Source\PSoC5/PWM_1.c ****             #else
 301:Generated_Source\PSoC5/PWM_1.c ****                 uint8 temp = comparemode;
 302:Generated_Source\PSoC5/PWM_1.c ****             #endif /* (PWM_1_UsingFixedFunction) */
 303:Generated_Source\PSoC5/PWM_1.c ****         }
 304:Generated_Source\PSoC5/PWM_1.c ****     #endif /* PWM_1_CompareMode1SW */
 305:Generated_Source\PSoC5/PWM_1.c **** 
 306:Generated_Source\PSoC5/PWM_1.c **** #else /* UseOneCompareMode */
 307:Generated_Source\PSoC5/PWM_1.c **** 
 308:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_CompareMode1SW)
 309:Generated_Source\PSoC5/PWM_1.c **** 
 310:Generated_Source\PSoC5/PWM_1.c **** 
 311:Generated_Source\PSoC5/PWM_1.c ****         /*******************************************************************************
 312:Generated_Source\PSoC5/PWM_1.c ****         * Function Name: PWM_1_SetCompareMode1
 313:Generated_Source\PSoC5/PWM_1.c ****         ********************************************************************************
 314:Generated_Source\PSoC5/PWM_1.c ****         *
 315:Generated_Source\PSoC5/PWM_1.c ****         * Summary:
 316:Generated_Source\PSoC5/PWM_1.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:Generated_Source\PSoC5/PWM_1.c ****         *
 318:Generated_Source\PSoC5/PWM_1.c ****         * Parameters:
 319:Generated_Source\PSoC5/PWM_1.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:Generated_Source\PSoC5/PWM_1.c ****         *                defined in the H file as input arguments.
 321:Generated_Source\PSoC5/PWM_1.c ****         *
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 8


 322:Generated_Source\PSoC5/PWM_1.c ****         * Return:
 323:Generated_Source\PSoC5/PWM_1.c ****         *  None
 324:Generated_Source\PSoC5/PWM_1.c ****         *
 325:Generated_Source\PSoC5/PWM_1.c ****         *******************************************************************************/
 326:Generated_Source\PSoC5/PWM_1.c ****         void PWM_1_SetCompareMode1(uint8 comparemode) 
 327:Generated_Source\PSoC5/PWM_1.c ****         {
 328:Generated_Source\PSoC5/PWM_1.c ****             #if(0 != PWM_1_CTRL_CMPMODE1_SHIFT)
 329:Generated_Source\PSoC5/PWM_1.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE1_SHIFT)
 330:Generated_Source\PSoC5/PWM_1.c ****                                            PWM_1_CTRL_CMPMODE1_MASK;
 331:Generated_Source\PSoC5/PWM_1.c ****             #else
 332:Generated_Source\PSoC5/PWM_1.c ****                 uint8 comparemodemasked = comparemode & PWM_1_CTRL_CMPMODE1_MASK;
 333:Generated_Source\PSoC5/PWM_1.c ****             #endif /* (0 != PWM_1_CTRL_CMPMODE1_SHIFT) */
 334:Generated_Source\PSoC5/PWM_1.c **** 
 335:Generated_Source\PSoC5/PWM_1.c ****             #if (PWM_1_UseControl)
 336:Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL &= ((uint8)(~PWM_1_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 337:Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_CONTROL |= comparemodemasked;
 338:Generated_Source\PSoC5/PWM_1.c ****             #endif /* (PWM_1_UseControl) */
 339:Generated_Source\PSoC5/PWM_1.c ****         }
 340:Generated_Source\PSoC5/PWM_1.c ****     #endif /* PWM_1_CompareMode1SW */
 341:Generated_Source\PSoC5/PWM_1.c **** 
 342:Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_CompareMode2SW)
 343:Generated_Source\PSoC5/PWM_1.c **** 
 344:Generated_Source\PSoC5/PWM_1.c **** 
 345:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 346:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_SetCompareMode2
 347:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 348:Generated_Source\PSoC5/PWM_1.c ****     *
 349:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 350:Generated_Source\PSoC5/PWM_1.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:Generated_Source\PSoC5/PWM_1.c ****     *
 352:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 353:Generated_Source\PSoC5/PWM_1.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:Generated_Source\PSoC5/PWM_1.c ****     *                defined in the H file as input arguments.
 355:Generated_Source\PSoC5/PWM_1.c ****     *
 356:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 357:Generated_Source\PSoC5/PWM_1.c ****     *  None
 358:Generated_Source\PSoC5/PWM_1.c ****     *
 359:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 360:Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_SetCompareMode2(uint8 comparemode) 
 361:Generated_Source\PSoC5/PWM_1.c ****     {
 362:Generated_Source\PSoC5/PWM_1.c **** 
 363:Generated_Source\PSoC5/PWM_1.c ****         #if(0 != PWM_1_CTRL_CMPMODE2_SHIFT)
 364:Generated_Source\PSoC5/PWM_1.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE2_SHIFT)) &
 365:Generated_Source\PSoC5/PWM_1.c ****                                                  PWM_1_CTRL_CMPMODE2_MASK;
 366:Generated_Source\PSoC5/PWM_1.c ****         #else
 367:Generated_Source\PSoC5/PWM_1.c ****             uint8 comparemodemasked = comparemode & PWM_1_CTRL_CMPMODE2_MASK;
 368:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (0 != PWM_1_CTRL_CMPMODE2_SHIFT) */
 369:Generated_Source\PSoC5/PWM_1.c **** 
 370:Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_UseControl)
 371:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_CONTROL &= ((uint8)(~PWM_1_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_CONTROL |= comparemodemasked;
 373:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UseControl) */
 374:Generated_Source\PSoC5/PWM_1.c ****     }
 375:Generated_Source\PSoC5/PWM_1.c ****     #endif /*PWM_1_CompareMode2SW */
 376:Generated_Source\PSoC5/PWM_1.c **** 
 377:Generated_Source\PSoC5/PWM_1.c **** #endif /* UseOneCompareMode */
 378:Generated_Source\PSoC5/PWM_1.c **** 
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 9


 379:Generated_Source\PSoC5/PWM_1.c **** 
 380:Generated_Source\PSoC5/PWM_1.c **** #if (!PWM_1_UsingFixedFunction)
 381:Generated_Source\PSoC5/PWM_1.c **** 
 382:Generated_Source\PSoC5/PWM_1.c **** 
 383:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 384:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteCounter
 385:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 386:Generated_Source\PSoC5/PWM_1.c ****     *
 387:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 388:Generated_Source\PSoC5/PWM_1.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:Generated_Source\PSoC5/PWM_1.c ****     *  implemented for that currently running period and only that period. This API
 390:Generated_Source\PSoC5/PWM_1.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:Generated_Source\PSoC5/PWM_1.c ****     *  PWM implementation.
 392:Generated_Source\PSoC5/PWM_1.c ****     *
 393:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 394:Generated_Source\PSoC5/PWM_1.c ****     *  counter:  The period new period counter value.
 395:Generated_Source\PSoC5/PWM_1.c ****     *
 396:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 397:Generated_Source\PSoC5/PWM_1.c ****     *  None
 398:Generated_Source\PSoC5/PWM_1.c ****     *
 399:Generated_Source\PSoC5/PWM_1.c ****     * Side Effects:
 400:Generated_Source\PSoC5/PWM_1.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:Generated_Source\PSoC5/PWM_1.c ****     *
 402:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 403:Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteCounter(uint8 counter) \
 404:Generated_Source\PSoC5/PWM_1.c ****                                        
 405:Generated_Source\PSoC5/PWM_1.c ****     {
  79              		.loc 1 405 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  84              	.LVL0:
 406:Generated_Source\PSoC5/PWM_1.c ****         CY_SET_REG8(PWM_1_COUNTER_LSB_PTR, counter);
  85              		.loc 1 406 0
  86 0000 014B     		ldr	r3, .L8
  87 0002 1870     		strb	r0, [r3]
  88 0004 7047     		bx	lr
  89              	.L9:
  90 0006 00BF     		.align	2
  91              	.L8:
  92 0008 0A640040 		.word	1073767434
  93              		.cfi_endproc
  94              	.LFE4:
  95              		.size	PWM_1_WriteCounter, .-PWM_1_WriteCounter
  96              		.section	.text.PWM_1_ReadCounter,"ax",%progbits
  97              		.align	2
  98              		.global	PWM_1_ReadCounter
  99              		.thumb
 100              		.thumb_func
 101              		.type	PWM_1_ReadCounter, %function
 102              	PWM_1_ReadCounter:
 103              	.LFB5:
 407:Generated_Source\PSoC5/PWM_1.c ****     }
 408:Generated_Source\PSoC5/PWM_1.c **** 
 409:Generated_Source\PSoC5/PWM_1.c **** 
 410:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 10


 411:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadCounter
 412:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 413:Generated_Source\PSoC5/PWM_1.c ****     *
 414:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 415:Generated_Source\PSoC5/PWM_1.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:Generated_Source\PSoC5/PWM_1.c ****     *  if the counter is enabled or running.
 417:Generated_Source\PSoC5/PWM_1.c ****     *
 418:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 419:Generated_Source\PSoC5/PWM_1.c ****     *  None
 420:Generated_Source\PSoC5/PWM_1.c ****     *
 421:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 422:Generated_Source\PSoC5/PWM_1.c ****     *  The current value of the counter.
 423:Generated_Source\PSoC5/PWM_1.c ****     *
 424:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 425:Generated_Source\PSoC5/PWM_1.c ****     uint8 PWM_1_ReadCounter(void) 
 426:Generated_Source\PSoC5/PWM_1.c ****     {
 104              		.loc 1 426 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
 427:Generated_Source\PSoC5/PWM_1.c ****         /* Force capture by reading Accumulator */
 428:Generated_Source\PSoC5/PWM_1.c ****         /* Must first do a software capture to be able to read the counter */
 429:Generated_Source\PSoC5/PWM_1.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:Generated_Source\PSoC5/PWM_1.c ****           (void)CY_GET_REG8(PWM_1_COUNTERCAP_LSB_PTR_8BIT);
 109              		.loc 1 430 0
 110 0000 024B     		ldr	r3, .L11
 111 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 431:Generated_Source\PSoC5/PWM_1.c **** 
 432:Generated_Source\PSoC5/PWM_1.c ****         /* Read the data from the FIFO */
 433:Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG8(PWM_1_CAPTURE_LSB_PTR));
 112              		.loc 1 433 0
 113 0004 024B     		ldr	r3, .L11+4
 114 0006 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 434:Generated_Source\PSoC5/PWM_1.c ****     }
 115              		.loc 1 434 0
 116 0008 7047     		bx	lr
 117              	.L12:
 118 000a 00BF     		.align	2
 119              	.L11:
 120 000c 1A640040 		.word	1073767450
 121 0010 5A640040 		.word	1073767514
 122              		.cfi_endproc
 123              	.LFE5:
 124              		.size	PWM_1_ReadCounter, .-PWM_1_ReadCounter
 125              		.section	.text.PWM_1_WritePeriod,"ax",%progbits
 126              		.align	2
 127              		.global	PWM_1_WritePeriod
 128              		.thumb
 129              		.thumb_func
 130              		.type	PWM_1_WritePeriod, %function
 131              	PWM_1_WritePeriod:
 132              	.LFB7:
 435:Generated_Source\PSoC5/PWM_1.c **** 
 436:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UseStatus)
 437:Generated_Source\PSoC5/PWM_1.c **** 
 438:Generated_Source\PSoC5/PWM_1.c **** 
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 11


 439:Generated_Source\PSoC5/PWM_1.c ****         /*******************************************************************************
 440:Generated_Source\PSoC5/PWM_1.c ****         * Function Name: PWM_1_ClearFIFO
 441:Generated_Source\PSoC5/PWM_1.c ****         ********************************************************************************
 442:Generated_Source\PSoC5/PWM_1.c ****         *
 443:Generated_Source\PSoC5/PWM_1.c ****         * Summary:
 444:Generated_Source\PSoC5/PWM_1.c ****         *  This function clears all capture data from the capture FIFO
 445:Generated_Source\PSoC5/PWM_1.c ****         *
 446:Generated_Source\PSoC5/PWM_1.c ****         * Parameters:
 447:Generated_Source\PSoC5/PWM_1.c ****         *  None
 448:Generated_Source\PSoC5/PWM_1.c ****         *
 449:Generated_Source\PSoC5/PWM_1.c ****         * Return:
 450:Generated_Source\PSoC5/PWM_1.c ****         *  None
 451:Generated_Source\PSoC5/PWM_1.c ****         *
 452:Generated_Source\PSoC5/PWM_1.c ****         *******************************************************************************/
 453:Generated_Source\PSoC5/PWM_1.c ****         void PWM_1_ClearFIFO(void) 
 454:Generated_Source\PSoC5/PWM_1.c ****         {
 455:Generated_Source\PSoC5/PWM_1.c ****             while(0u != (PWM_1_ReadStatusRegister() & PWM_1_STATUS_FIFONEMPTY))
 456:Generated_Source\PSoC5/PWM_1.c ****             {
 457:Generated_Source\PSoC5/PWM_1.c ****                 (void)PWM_1_ReadCapture();
 458:Generated_Source\PSoC5/PWM_1.c ****             }
 459:Generated_Source\PSoC5/PWM_1.c ****         }
 460:Generated_Source\PSoC5/PWM_1.c **** 
 461:Generated_Source\PSoC5/PWM_1.c ****     #endif /* PWM_1_UseStatus */
 462:Generated_Source\PSoC5/PWM_1.c **** 
 463:Generated_Source\PSoC5/PWM_1.c **** #endif /* !PWM_1_UsingFixedFunction */
 464:Generated_Source\PSoC5/PWM_1.c **** 
 465:Generated_Source\PSoC5/PWM_1.c **** 
 466:Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
 467:Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_WritePeriod
 468:Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
 469:Generated_Source\PSoC5/PWM_1.c **** *
 470:Generated_Source\PSoC5/PWM_1.c **** * Summary:
 471:Generated_Source\PSoC5/PWM_1.c **** *  This function is used to change the period of the counter.  The new period
 472:Generated_Source\PSoC5/PWM_1.c **** *  will be loaded the next time terminal count is detected.
 473:Generated_Source\PSoC5/PWM_1.c **** *
 474:Generated_Source\PSoC5/PWM_1.c **** * Parameters:
 475:Generated_Source\PSoC5/PWM_1.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:Generated_Source\PSoC5/PWM_1.c **** *           will result in the counter remaining at zero.
 477:Generated_Source\PSoC5/PWM_1.c **** *
 478:Generated_Source\PSoC5/PWM_1.c **** * Return:
 479:Generated_Source\PSoC5/PWM_1.c **** *  None
 480:Generated_Source\PSoC5/PWM_1.c **** *
 481:Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
 482:Generated_Source\PSoC5/PWM_1.c **** void PWM_1_WritePeriod(uint8 period) 
 483:Generated_Source\PSoC5/PWM_1.c **** {
 133              		.loc 1 483 0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              		@ link register save eliminated.
 138              	.LVL1:
 484:Generated_Source\PSoC5/PWM_1.c ****     #if(PWM_1_UsingFixedFunction)
 485:Generated_Source\PSoC5/PWM_1.c ****         CY_SET_REG16(PWM_1_PERIOD_LSB_PTR, (uint16)period);
 486:Generated_Source\PSoC5/PWM_1.c ****     #else
 487:Generated_Source\PSoC5/PWM_1.c ****         CY_SET_REG8(PWM_1_PERIOD_LSB_PTR, period);
 139              		.loc 1 487 0
 140 0000 014B     		ldr	r3, .L14
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 12


 141 0002 1870     		strb	r0, [r3]
 142 0004 7047     		bx	lr
 143              	.L15:
 144 0006 00BF     		.align	2
 145              	.L14:
 146 0008 4A640040 		.word	1073767498
 147              		.cfi_endproc
 148              	.LFE7:
 149              		.size	PWM_1_WritePeriod, .-PWM_1_WritePeriod
 150              		.section	.text.PWM_1_WriteCompare,"ax",%progbits
 151              		.align	2
 152              		.global	PWM_1_WriteCompare
 153              		.thumb
 154              		.thumb_func
 155              		.type	PWM_1_WriteCompare, %function
 156              	PWM_1_WriteCompare:
 157              	.LFB8:
 488:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 489:Generated_Source\PSoC5/PWM_1.c **** }
 490:Generated_Source\PSoC5/PWM_1.c **** 
 491:Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_UseOneCompareMode)
 492:Generated_Source\PSoC5/PWM_1.c **** 
 493:Generated_Source\PSoC5/PWM_1.c **** 
 494:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 495:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteCompare
 496:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 497:Generated_Source\PSoC5/PWM_1.c ****     *
 498:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 499:Generated_Source\PSoC5/PWM_1.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:Generated_Source\PSoC5/PWM_1.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:Generated_Source\PSoC5/PWM_1.c ****     *  The compare output will be driven high when the present counter value is
 502:Generated_Source\PSoC5/PWM_1.c ****     *  compared to the compare value based on the compare mode defined in
 503:Generated_Source\PSoC5/PWM_1.c ****     *  Dither Mode.
 504:Generated_Source\PSoC5/PWM_1.c ****     *
 505:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 506:Generated_Source\PSoC5/PWM_1.c ****     *  compare:  New compare value.
 507:Generated_Source\PSoC5/PWM_1.c ****     *
 508:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 509:Generated_Source\PSoC5/PWM_1.c ****     *  None
 510:Generated_Source\PSoC5/PWM_1.c ****     *
 511:Generated_Source\PSoC5/PWM_1.c ****     * Side Effects:
 512:Generated_Source\PSoC5/PWM_1.c ****     *  This function is only available if the PWM mode parameter is set to
 513:Generated_Source\PSoC5/PWM_1.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:Generated_Source\PSoC5/PWM_1.c ****     *
 515:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 516:Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteCompare(uint8 compare) \
 517:Generated_Source\PSoC5/PWM_1.c ****                                        
 518:Generated_Source\PSoC5/PWM_1.c ****     {
 158              		.loc 1 518 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 163              	.LVL2:
 519:Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UsingFixedFunction)
 520:Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE1_LSB_PTR, (uint16)compare);
 521:Generated_Source\PSoC5/PWM_1.c ****         #else
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 13


 522:Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG8(PWM_1_COMPARE1_LSB_PTR, compare);
 164              		.loc 1 522 0
 165 0000 014B     		ldr	r3, .L17
 166 0002 1870     		strb	r0, [r3]
 167 0004 7047     		bx	lr
 168              	.L18:
 169 0006 00BF     		.align	2
 170              	.L17:
 171 0008 2A640040 		.word	1073767466
 172              		.cfi_endproc
 173              	.LFE8:
 174              		.size	PWM_1_WriteCompare, .-PWM_1_WriteCompare
 175              		.section	.text.PWM_1_SetInterruptMode,"ax",%progbits
 176              		.align	2
 177              		.global	PWM_1_SetInterruptMode
 178              		.thumb
 179              		.thumb_func
 180              		.type	PWM_1_SetInterruptMode, %function
 181              	PWM_1_SetInterruptMode:
 182              	.LFB9:
 523:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UsingFixedFunction) */
 524:Generated_Source\PSoC5/PWM_1.c **** 
 525:Generated_Source\PSoC5/PWM_1.c ****         #if (PWM_1_PWMMode == PWM_1__B_PWM__DITHER)
 526:Generated_Source\PSoC5/PWM_1.c ****             #if(PWM_1_UsingFixedFunction)
 527:Generated_Source\PSoC5/PWM_1.c ****                 CY_SET_REG16(PWM_1_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:Generated_Source\PSoC5/PWM_1.c ****             #else
 529:Generated_Source\PSoC5/PWM_1.c ****                 CY_SET_REG8(PWM_1_COMPARE2_LSB_PTR, (compare + 1u));
 530:Generated_Source\PSoC5/PWM_1.c ****             #endif /* (PWM_1_UsingFixedFunction) */
 531:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_PWMMode == PWM_1__B_PWM__DITHER) */
 532:Generated_Source\PSoC5/PWM_1.c ****     }
 533:Generated_Source\PSoC5/PWM_1.c **** 
 534:Generated_Source\PSoC5/PWM_1.c **** 
 535:Generated_Source\PSoC5/PWM_1.c **** #else
 536:Generated_Source\PSoC5/PWM_1.c **** 
 537:Generated_Source\PSoC5/PWM_1.c **** 
 538:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 539:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteCompare1
 540:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 541:Generated_Source\PSoC5/PWM_1.c ****     *
 542:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 543:Generated_Source\PSoC5/PWM_1.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:Generated_Source\PSoC5/PWM_1.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:Generated_Source\PSoC5/PWM_1.c ****     *  driven high when the present counter value is less than or less than or
 546:Generated_Source\PSoC5/PWM_1.c ****     *  equal to the compare register, depending on the mode.
 547:Generated_Source\PSoC5/PWM_1.c ****     *
 548:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 549:Generated_Source\PSoC5/PWM_1.c ****     *  compare:  New compare value.
 550:Generated_Source\PSoC5/PWM_1.c ****     *
 551:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 552:Generated_Source\PSoC5/PWM_1.c ****     *  None
 553:Generated_Source\PSoC5/PWM_1.c ****     *
 554:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 555:Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteCompare1(uint8 compare) \
 556:Generated_Source\PSoC5/PWM_1.c ****                                         
 557:Generated_Source\PSoC5/PWM_1.c ****     {
 558:Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UsingFixedFunction)
 559:Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE1_LSB_PTR, (uint16)compare);
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 14


 560:Generated_Source\PSoC5/PWM_1.c ****         #else
 561:Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG8(PWM_1_COMPARE1_LSB_PTR, compare);
 562:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UsingFixedFunction) */
 563:Generated_Source\PSoC5/PWM_1.c ****     }
 564:Generated_Source\PSoC5/PWM_1.c **** 
 565:Generated_Source\PSoC5/PWM_1.c **** 
 566:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 567:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteCompare2
 568:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 569:Generated_Source\PSoC5/PWM_1.c ****     *
 570:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 571:Generated_Source\PSoC5/PWM_1.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:Generated_Source\PSoC5/PWM_1.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:Generated_Source\PSoC5/PWM_1.c ****     *  The compare output will be driven high when the present counter value is
 574:Generated_Source\PSoC5/PWM_1.c ****     *  less than or less than or equal to the compare register, depending on the
 575:Generated_Source\PSoC5/PWM_1.c ****     *  mode.
 576:Generated_Source\PSoC5/PWM_1.c ****     *
 577:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 578:Generated_Source\PSoC5/PWM_1.c ****     *  compare:  New compare value.
 579:Generated_Source\PSoC5/PWM_1.c ****     *
 580:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 581:Generated_Source\PSoC5/PWM_1.c ****     *  None
 582:Generated_Source\PSoC5/PWM_1.c ****     *
 583:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 584:Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteCompare2(uint8 compare) \
 585:Generated_Source\PSoC5/PWM_1.c ****                                         
 586:Generated_Source\PSoC5/PWM_1.c ****     {
 587:Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UsingFixedFunction)
 588:Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE2_LSB_PTR, compare);
 589:Generated_Source\PSoC5/PWM_1.c ****         #else
 590:Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG8(PWM_1_COMPARE2_LSB_PTR, compare);
 591:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UsingFixedFunction) */
 592:Generated_Source\PSoC5/PWM_1.c ****     }
 593:Generated_Source\PSoC5/PWM_1.c **** #endif /* UseOneCompareMode */
 594:Generated_Source\PSoC5/PWM_1.c **** 
 595:Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_DeadBandUsed)
 596:Generated_Source\PSoC5/PWM_1.c **** 
 597:Generated_Source\PSoC5/PWM_1.c **** 
 598:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 599:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteDeadTime
 600:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 601:Generated_Source\PSoC5/PWM_1.c ****     *
 602:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 603:Generated_Source\PSoC5/PWM_1.c ****     *  This function writes the dead-band counts to the corresponding register
 604:Generated_Source\PSoC5/PWM_1.c ****     *
 605:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 606:Generated_Source\PSoC5/PWM_1.c ****     *  deadtime:  Number of counts for dead time
 607:Generated_Source\PSoC5/PWM_1.c ****     *
 608:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 609:Generated_Source\PSoC5/PWM_1.c ****     *  None
 610:Generated_Source\PSoC5/PWM_1.c ****     *
 611:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 612:Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteDeadTime(uint8 deadtime) 
 613:Generated_Source\PSoC5/PWM_1.c ****     {
 614:Generated_Source\PSoC5/PWM_1.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:Generated_Source\PSoC5/PWM_1.c ****         #if(!PWM_1_DeadBand2_4)
 616:Generated_Source\PSoC5/PWM_1.c ****             CY_SET_REG8(PWM_1_DEADBAND_COUNT_PTR, deadtime);
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 15


 617:Generated_Source\PSoC5/PWM_1.c ****         #else
 618:Generated_Source\PSoC5/PWM_1.c ****             /* Otherwise the data has to be masked and offset */
 619:Generated_Source\PSoC5/PWM_1.c ****             /* Clear existing data */
 620:Generated_Source\PSoC5/PWM_1.c ****             PWM_1_DEADBAND_COUNT &= ((uint8)(~PWM_1_DEADBAND_COUNT_MASK));
 621:Generated_Source\PSoC5/PWM_1.c **** 
 622:Generated_Source\PSoC5/PWM_1.c ****             /* Set new dead time */
 623:Generated_Source\PSoC5/PWM_1.c ****             #if(PWM_1_DEADBAND_COUNT_SHIFT)
 624:Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM_1_DEADBAND_COUNT_SHIFT)) &
 625:Generated_Source\PSoC5/PWM_1.c ****                                                     PWM_1_DEADBAND_COUNT_MASK;
 626:Generated_Source\PSoC5/PWM_1.c ****             #else
 627:Generated_Source\PSoC5/PWM_1.c ****                 PWM_1_DEADBAND_COUNT |= deadtime & PWM_1_DEADBAND_COUNT_MASK;
 628:Generated_Source\PSoC5/PWM_1.c ****             #endif /* (PWM_1_DEADBAND_COUNT_SHIFT) */
 629:Generated_Source\PSoC5/PWM_1.c **** 
 630:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (!PWM_1_DeadBand2_4) */
 631:Generated_Source\PSoC5/PWM_1.c ****     }
 632:Generated_Source\PSoC5/PWM_1.c **** 
 633:Generated_Source\PSoC5/PWM_1.c **** 
 634:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 635:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadDeadTime
 636:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 637:Generated_Source\PSoC5/PWM_1.c ****     *
 638:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 639:Generated_Source\PSoC5/PWM_1.c ****     *  This function reads the dead-band counts from the corresponding register
 640:Generated_Source\PSoC5/PWM_1.c ****     *
 641:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 642:Generated_Source\PSoC5/PWM_1.c ****     *  None
 643:Generated_Source\PSoC5/PWM_1.c ****     *
 644:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 645:Generated_Source\PSoC5/PWM_1.c ****     *  Dead Band Counts
 646:Generated_Source\PSoC5/PWM_1.c ****     *
 647:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 648:Generated_Source\PSoC5/PWM_1.c ****     uint8 PWM_1_ReadDeadTime(void) 
 649:Generated_Source\PSoC5/PWM_1.c ****     {
 650:Generated_Source\PSoC5/PWM_1.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:Generated_Source\PSoC5/PWM_1.c ****         #if(!PWM_1_DeadBand2_4)
 652:Generated_Source\PSoC5/PWM_1.c ****             return (CY_GET_REG8(PWM_1_DEADBAND_COUNT_PTR));
 653:Generated_Source\PSoC5/PWM_1.c ****         #else
 654:Generated_Source\PSoC5/PWM_1.c **** 
 655:Generated_Source\PSoC5/PWM_1.c ****             /* Otherwise the data has to be masked and offset */
 656:Generated_Source\PSoC5/PWM_1.c ****             #if(PWM_1_DEADBAND_COUNT_SHIFT)
 657:Generated_Source\PSoC5/PWM_1.c ****                 return ((uint8)(((uint8)(PWM_1_DEADBAND_COUNT & PWM_1_DEADBAND_COUNT_MASK)) >>
 658:Generated_Source\PSoC5/PWM_1.c ****                                                                            PWM_1_DEADBAND_COUNT_SHI
 659:Generated_Source\PSoC5/PWM_1.c ****             #else
 660:Generated_Source\PSoC5/PWM_1.c ****                 return (PWM_1_DEADBAND_COUNT & PWM_1_DEADBAND_COUNT_MASK);
 661:Generated_Source\PSoC5/PWM_1.c ****             #endif /* (PWM_1_DEADBAND_COUNT_SHIFT) */
 662:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (!PWM_1_DeadBand2_4) */
 663:Generated_Source\PSoC5/PWM_1.c ****     }
 664:Generated_Source\PSoC5/PWM_1.c **** #endif /* DeadBandUsed */
 665:Generated_Source\PSoC5/PWM_1.c **** 
 666:Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_UseStatus || PWM_1_UsingFixedFunction)
 667:Generated_Source\PSoC5/PWM_1.c **** 
 668:Generated_Source\PSoC5/PWM_1.c **** 
 669:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 670:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_SetInterruptMode
 671:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 672:Generated_Source\PSoC5/PWM_1.c ****     *
 673:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 16


 674:Generated_Source\PSoC5/PWM_1.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:Generated_Source\PSoC5/PWM_1.c ****     *  source status register.
 676:Generated_Source\PSoC5/PWM_1.c ****     *
 677:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 678:Generated_Source\PSoC5/PWM_1.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:Generated_Source\PSoC5/PWM_1.c ****     *
 680:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 681:Generated_Source\PSoC5/PWM_1.c ****     *  None
 682:Generated_Source\PSoC5/PWM_1.c ****     *
 683:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 684:Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_SetInterruptMode(uint8 interruptMode) 
 685:Generated_Source\PSoC5/PWM_1.c ****     {
 183              		.loc 1 685 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187              		@ link register save eliminated.
 188              	.LVL3:
 686:Generated_Source\PSoC5/PWM_1.c ****         CY_SET_REG8(PWM_1_STATUS_MASK_PTR, interruptMode);
 189              		.loc 1 686 0
 190 0000 014B     		ldr	r3, .L20
 191 0002 1870     		strb	r0, [r3]
 192 0004 7047     		bx	lr
 193              	.L21:
 194 0006 00BF     		.align	2
 195              	.L20:
 196 0008 8D640040 		.word	1073767565
 197              		.cfi_endproc
 198              	.LFE9:
 199              		.size	PWM_1_SetInterruptMode, .-PWM_1_SetInterruptMode
 200              		.section	.text.PWM_1_ReadStatusRegister,"ax",%progbits
 201              		.align	2
 202              		.global	PWM_1_ReadStatusRegister
 203              		.thumb
 204              		.thumb_func
 205              		.type	PWM_1_ReadStatusRegister, %function
 206              	PWM_1_ReadStatusRegister:
 207              	.LFB10:
 687:Generated_Source\PSoC5/PWM_1.c ****     }
 688:Generated_Source\PSoC5/PWM_1.c **** 
 689:Generated_Source\PSoC5/PWM_1.c **** 
 690:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 691:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadStatusRegister
 692:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 693:Generated_Source\PSoC5/PWM_1.c ****     *
 694:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 695:Generated_Source\PSoC5/PWM_1.c ****     *  This function returns the current state of the status register.
 696:Generated_Source\PSoC5/PWM_1.c ****     *
 697:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 698:Generated_Source\PSoC5/PWM_1.c ****     *  None
 699:Generated_Source\PSoC5/PWM_1.c ****     *
 700:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 701:Generated_Source\PSoC5/PWM_1.c ****     *  uint8 : Current status register value. The status register bits are:
 702:Generated_Source\PSoC5/PWM_1.c ****     *  [7:6] : Unused(0)
 703:Generated_Source\PSoC5/PWM_1.c ****     *  [5]   : Kill event output
 704:Generated_Source\PSoC5/PWM_1.c ****     *  [4]   : FIFO not empty
 705:Generated_Source\PSoC5/PWM_1.c ****     *  [3]   : FIFO full
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 17


 706:Generated_Source\PSoC5/PWM_1.c ****     *  [2]   : Terminal count
 707:Generated_Source\PSoC5/PWM_1.c ****     *  [1]   : Compare output 2
 708:Generated_Source\PSoC5/PWM_1.c ****     *  [0]   : Compare output 1
 709:Generated_Source\PSoC5/PWM_1.c ****     *
 710:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 711:Generated_Source\PSoC5/PWM_1.c ****     uint8 PWM_1_ReadStatusRegister(void) 
 712:Generated_Source\PSoC5/PWM_1.c ****     {
 208              		.loc 1 712 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 713:Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG8(PWM_1_STATUS_PTR));
 213              		.loc 1 713 0
 214 0000 014B     		ldr	r3, .L23
 215 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 714:Generated_Source\PSoC5/PWM_1.c ****     }
 216              		.loc 1 714 0
 217 0004 7047     		bx	lr
 218              	.L24:
 219 0006 00BF     		.align	2
 220              	.L23:
 221 0008 6D640040 		.word	1073767533
 222              		.cfi_endproc
 223              	.LFE10:
 224              		.size	PWM_1_ReadStatusRegister, .-PWM_1_ReadStatusRegister
 225              		.section	.text.PWM_1_ReadControlRegister,"ax",%progbits
 226              		.align	2
 227              		.global	PWM_1_ReadControlRegister
 228              		.thumb
 229              		.thumb_func
 230              		.type	PWM_1_ReadControlRegister, %function
 231              	PWM_1_ReadControlRegister:
 232              	.LFB11:
 715:Generated_Source\PSoC5/PWM_1.c **** 
 716:Generated_Source\PSoC5/PWM_1.c **** #endif /* (PWM_1_UseStatus || PWM_1_UsingFixedFunction) */
 717:Generated_Source\PSoC5/PWM_1.c **** 
 718:Generated_Source\PSoC5/PWM_1.c **** 
 719:Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_UseControl)
 720:Generated_Source\PSoC5/PWM_1.c **** 
 721:Generated_Source\PSoC5/PWM_1.c **** 
 722:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 723:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadControlRegister
 724:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 725:Generated_Source\PSoC5/PWM_1.c ****     *
 726:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 727:Generated_Source\PSoC5/PWM_1.c ****     *  Returns the current state of the control register. This API is available
 728:Generated_Source\PSoC5/PWM_1.c ****     *  only if the control register is not removed.
 729:Generated_Source\PSoC5/PWM_1.c ****     *
 730:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 731:Generated_Source\PSoC5/PWM_1.c ****     *  None
 732:Generated_Source\PSoC5/PWM_1.c ****     *
 733:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 734:Generated_Source\PSoC5/PWM_1.c ****     *  uint8 : Current control register value
 735:Generated_Source\PSoC5/PWM_1.c ****     *
 736:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 737:Generated_Source\PSoC5/PWM_1.c ****     uint8 PWM_1_ReadControlRegister(void) 
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 18


 738:Generated_Source\PSoC5/PWM_1.c ****     {
 233              		.loc 1 738 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 237              		@ link register save eliminated.
 739:Generated_Source\PSoC5/PWM_1.c ****         uint8 result;
 740:Generated_Source\PSoC5/PWM_1.c **** 
 741:Generated_Source\PSoC5/PWM_1.c ****         result = CY_GET_REG8(PWM_1_CONTROL_PTR);
 238              		.loc 1 741 0
 239 0000 014B     		ldr	r3, .L26
 240 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 241              	.LVL4:
 742:Generated_Source\PSoC5/PWM_1.c ****         return (result);
 743:Generated_Source\PSoC5/PWM_1.c ****     }
 242              		.loc 1 743 0
 243 0004 7047     		bx	lr
 244              	.L27:
 245 0006 00BF     		.align	2
 246              	.L26:
 247 0008 7D640040 		.word	1073767549
 248              		.cfi_endproc
 249              	.LFE11:
 250              		.size	PWM_1_ReadControlRegister, .-PWM_1_ReadControlRegister
 251              		.section	.text.PWM_1_WriteControlRegister,"ax",%progbits
 252              		.align	2
 253              		.global	PWM_1_WriteControlRegister
 254              		.thumb
 255              		.thumb_func
 256              		.type	PWM_1_WriteControlRegister, %function
 257              	PWM_1_WriteControlRegister:
 258              	.LFB12:
 744:Generated_Source\PSoC5/PWM_1.c **** 
 745:Generated_Source\PSoC5/PWM_1.c **** 
 746:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 747:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_WriteControlRegister
 748:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 749:Generated_Source\PSoC5/PWM_1.c ****     *
 750:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 751:Generated_Source\PSoC5/PWM_1.c ****     *  Sets the bit field of the control register. This API is available only if
 752:Generated_Source\PSoC5/PWM_1.c ****     *  the control register is not removed.
 753:Generated_Source\PSoC5/PWM_1.c ****     *
 754:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 755:Generated_Source\PSoC5/PWM_1.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:Generated_Source\PSoC5/PWM_1.c ****     *  [7]   : PWM Enable
 757:Generated_Source\PSoC5/PWM_1.c ****     *  [6]   : Reset
 758:Generated_Source\PSoC5/PWM_1.c ****     *  [5:3] : Compare Mode2
 759:Generated_Source\PSoC5/PWM_1.c ****     *  [2:0] : Compare Mode2
 760:Generated_Source\PSoC5/PWM_1.c ****     *
 761:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 762:Generated_Source\PSoC5/PWM_1.c ****     *  None
 763:Generated_Source\PSoC5/PWM_1.c ****     *
 764:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 765:Generated_Source\PSoC5/PWM_1.c ****     void PWM_1_WriteControlRegister(uint8 control) 
 766:Generated_Source\PSoC5/PWM_1.c ****     {
 259              		.loc 1 766 0
 260              		.cfi_startproc
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 19


 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              		@ link register save eliminated.
 264              	.LVL5:
 767:Generated_Source\PSoC5/PWM_1.c ****         CY_SET_REG8(PWM_1_CONTROL_PTR, control);
 265              		.loc 1 767 0
 266 0000 014B     		ldr	r3, .L29
 267 0002 1870     		strb	r0, [r3]
 268 0004 7047     		bx	lr
 269              	.L30:
 270 0006 00BF     		.align	2
 271              	.L29:
 272 0008 7D640040 		.word	1073767549
 273              		.cfi_endproc
 274              	.LFE12:
 275              		.size	PWM_1_WriteControlRegister, .-PWM_1_WriteControlRegister
 276              		.section	.text.PWM_1_ReadCapture,"ax",%progbits
 277              		.align	2
 278              		.global	PWM_1_ReadCapture
 279              		.thumb
 280              		.thumb_func
 281              		.type	PWM_1_ReadCapture, %function
 282              	PWM_1_ReadCapture:
 283              	.LFB13:
 768:Generated_Source\PSoC5/PWM_1.c ****     }
 769:Generated_Source\PSoC5/PWM_1.c **** 
 770:Generated_Source\PSoC5/PWM_1.c **** #endif /* (PWM_1_UseControl) */
 771:Generated_Source\PSoC5/PWM_1.c **** 
 772:Generated_Source\PSoC5/PWM_1.c **** 
 773:Generated_Source\PSoC5/PWM_1.c **** #if (!PWM_1_UsingFixedFunction)
 774:Generated_Source\PSoC5/PWM_1.c **** 
 775:Generated_Source\PSoC5/PWM_1.c **** 
 776:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 777:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadCapture
 778:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 779:Generated_Source\PSoC5/PWM_1.c ****     *
 780:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 781:Generated_Source\PSoC5/PWM_1.c ****     *  Reads the capture value from the capture FIFO.
 782:Generated_Source\PSoC5/PWM_1.c ****     *
 783:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 784:Generated_Source\PSoC5/PWM_1.c ****     *  None
 785:Generated_Source\PSoC5/PWM_1.c ****     *
 786:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 787:Generated_Source\PSoC5/PWM_1.c ****     *  uint8/uint16: The current capture value
 788:Generated_Source\PSoC5/PWM_1.c ****     *
 789:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 790:Generated_Source\PSoC5/PWM_1.c ****     uint8 PWM_1_ReadCapture(void) 
 791:Generated_Source\PSoC5/PWM_1.c ****     {
 284              		.loc 1 791 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288              		@ link register save eliminated.
 792:Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG8(PWM_1_CAPTURE_LSB_PTR));
 289              		.loc 1 792 0
 290 0000 014B     		ldr	r3, .L32
 291 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 20


 793:Generated_Source\PSoC5/PWM_1.c ****     }
 292              		.loc 1 793 0
 293 0004 7047     		bx	lr
 294              	.L33:
 295 0006 00BF     		.align	2
 296              	.L32:
 297 0008 5A640040 		.word	1073767514
 298              		.cfi_endproc
 299              	.LFE13:
 300              		.size	PWM_1_ReadCapture, .-PWM_1_ReadCapture
 301              		.section	.text.PWM_1_ClearFIFO,"ax",%progbits
 302              		.align	2
 303              		.global	PWM_1_ClearFIFO
 304              		.thumb
 305              		.thumb_func
 306              		.type	PWM_1_ClearFIFO, %function
 307              	PWM_1_ClearFIFO:
 308              	.LFB6:
 454:Generated_Source\PSoC5/PWM_1.c ****             while(0u != (PWM_1_ReadStatusRegister() & PWM_1_STATUS_FIFONEMPTY))
 309              		.loc 1 454 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313 0000 08B5     		push	{r3, lr}
 314              		.cfi_def_cfa_offset 8
 315              		.cfi_offset 3, -8
 316              		.cfi_offset 14, -4
 455:Generated_Source\PSoC5/PWM_1.c ****             {
 317              		.loc 1 455 0
 318 0002 01E0     		b	.L35
 319              	.L36:
 457:Generated_Source\PSoC5/PWM_1.c ****             }
 320              		.loc 1 457 0
 321 0004 FFF7FEFF 		bl	PWM_1_ReadCapture
 322              	.LVL6:
 323              	.L35:
 455:Generated_Source\PSoC5/PWM_1.c ****             {
 324              		.loc 1 455 0
 325 0008 FFF7FEFF 		bl	PWM_1_ReadStatusRegister
 326              	.LVL7:
 327 000c 10F0100F 		tst	r0, #16
 328 0010 F8D1     		bne	.L36
 459:Generated_Source\PSoC5/PWM_1.c **** 
 329              		.loc 1 459 0
 330 0012 08BD     		pop	{r3, pc}
 331              		.cfi_endproc
 332              	.LFE6:
 333              		.size	PWM_1_ClearFIFO, .-PWM_1_ClearFIFO
 334              		.section	.text.PWM_1_Init,"ax",%progbits
 335              		.align	2
 336              		.global	PWM_1_Init
 337              		.thumb
 338              		.thumb_func
 339              		.type	PWM_1_Init, %function
 340              	PWM_1_Init:
 341              	.LFB1:
  85:Generated_Source\PSoC5/PWM_1.c ****     #if (PWM_1_UsingFixedFunction || PWM_1_UseControl)
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 21


 342              		.loc 1 85 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346 0000 08B5     		push	{r3, lr}
 347              		.cfi_def_cfa_offset 8
 348              		.cfi_offset 3, -8
 349              		.cfi_offset 14, -4
 117:Generated_Source\PSoC5/PWM_1.c ****                 ((uint8)(~PWM_1_CTRL_CMPMODE1_MASK));
 350              		.loc 1 117 0
 351 0002 124A     		ldr	r2, .L40
 352 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 353 0006 03F0C003 		and	r3, r3, #192
 354              	.LVL8:
 119:Generated_Source\PSoC5/PWM_1.c ****                                    PWM_1_DEFAULT_COMPARE1_MODE;
 355              		.loc 1 119 0
 356 000a 43F00903 		orr	r3, r3, #9
 357              	.LVL9:
 358 000e 1370     		strb	r3, [r2]
 126:Generated_Source\PSoC5/PWM_1.c ****         #else /* (PWM_1_Resolution == 16)*/
 359              		.loc 1 126 0
 360 0010 1D32     		adds	r2, r2, #29
 361 0012 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 362 0014 43F00103 		orr	r3, r3, #1
 363 0018 1370     		strb	r3, [r2]
 133:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (!PWM_1_UsingFixedFunction) */
 364              		.loc 1 133 0
 365 001a FF20     		movs	r0, #255
 366 001c FFF7FEFF 		bl	PWM_1_WriteCounter
 367              	.LVL10:
 136:Generated_Source\PSoC5/PWM_1.c **** 
 368              		.loc 1 136 0
 369 0020 FF20     		movs	r0, #255
 370 0022 FFF7FEFF 		bl	PWM_1_WritePeriod
 371              	.LVL11:
 139:Generated_Source\PSoC5/PWM_1.c ****         #else
 372              		.loc 1 139 0
 373 0026 7F20     		movs	r0, #127
 374 0028 FFF7FEFF 		bl	PWM_1_WriteCompare
 375              	.LVL12:
 154:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UseStatus || PWM_1_UsingFixedFunction) */
 376              		.loc 1 154 0
 377 002c 0020     		movs	r0, #0
 378 002e FFF7FEFF 		bl	PWM_1_SetInterruptMode
 379              	.LVL13:
 167:Generated_Source\PSoC5/PWM_1.c ****             /* Use the interrupt output of the status register for IRQ output */
 380              		.loc 1 167 0
 381 0032 FFF7FEFF 		bl	CyEnterCriticalSection
 382              	.LVL14:
 169:Generated_Source\PSoC5/PWM_1.c **** 
 383              		.loc 1 169 0
 384 0036 064A     		ldr	r2, .L40+4
 385 0038 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 386 003a 43F01003 		orr	r3, r3, #16
 387 003e 1370     		strb	r3, [r2]
 172:Generated_Source\PSoC5/PWM_1.c **** 
 388              		.loc 1 172 0
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 22


 389 0040 FFF7FEFF 		bl	CyExitCriticalSection
 390              	.LVL15:
 176:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UseStatus) */
 391              		.loc 1 176 0
 392 0044 FFF7FEFF 		bl	PWM_1_ClearFIFO
 393              	.LVL16:
 394 0048 08BD     		pop	{r3, pc}
 395              	.L41:
 396 004a 00BF     		.align	2
 397              	.L40:
 398 004c 7D640040 		.word	1073767549
 399 0050 9D640040 		.word	1073767581
 400              		.cfi_endproc
 401              	.LFE1:
 402              		.size	PWM_1_Init, .-PWM_1_Init
 403              		.section	.text.PWM_1_Start,"ax",%progbits
 404              		.align	2
 405              		.global	PWM_1_Start
 406              		.thumb
 407              		.thumb_func
 408              		.type	PWM_1_Start, %function
 409              	PWM_1_Start:
 410              	.LFB0:
  56:Generated_Source\PSoC5/PWM_1.c ****     /* If not Initialized then initialize all required hardware and software */
 411              		.loc 1 56 0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415 0000 08B5     		push	{r3, lr}
 416              		.cfi_def_cfa_offset 8
 417              		.cfi_offset 3, -8
 418              		.cfi_offset 14, -4
  58:Generated_Source\PSoC5/PWM_1.c ****     {
 419              		.loc 1 58 0
 420 0002 054B     		ldr	r3, .L45
 421 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 422 0006 23B9     		cbnz	r3, .L43
  60:Generated_Source\PSoC5/PWM_1.c ****         PWM_1_initVar = 1u;
 423              		.loc 1 60 0
 424 0008 FFF7FEFF 		bl	PWM_1_Init
 425              	.LVL17:
  61:Generated_Source\PSoC5/PWM_1.c ****     }
 426              		.loc 1 61 0
 427 000c 0122     		movs	r2, #1
 428 000e 024B     		ldr	r3, .L45
 429 0010 1A70     		strb	r2, [r3]
 430              	.L43:
  63:Generated_Source\PSoC5/PWM_1.c **** 
 431              		.loc 1 63 0
 432 0012 FFF7FEFF 		bl	PWM_1_Enable
 433              	.LVL18:
 434 0016 08BD     		pop	{r3, pc}
 435              	.L46:
 436              		.align	2
 437              	.L45:
 438 0018 00000000 		.word	.LANCHOR0
 439              		.cfi_endproc
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 23


 440              	.LFE0:
 441              		.size	PWM_1_Start, .-PWM_1_Start
 442              		.section	.text.PWM_1_ReadCompare,"ax",%progbits
 443              		.align	2
 444              		.global	PWM_1_ReadCompare
 445              		.thumb
 446              		.thumb_func
 447              		.type	PWM_1_ReadCompare, %function
 448              	PWM_1_ReadCompare:
 449              	.LFB14:
 794:Generated_Source\PSoC5/PWM_1.c **** 
 795:Generated_Source\PSoC5/PWM_1.c **** #endif /* (!PWM_1_UsingFixedFunction) */
 796:Generated_Source\PSoC5/PWM_1.c **** 
 797:Generated_Source\PSoC5/PWM_1.c **** 
 798:Generated_Source\PSoC5/PWM_1.c **** #if (PWM_1_UseOneCompareMode)
 799:Generated_Source\PSoC5/PWM_1.c **** 
 800:Generated_Source\PSoC5/PWM_1.c **** 
 801:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 802:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadCompare
 803:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 804:Generated_Source\PSoC5/PWM_1.c ****     *
 805:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 806:Generated_Source\PSoC5/PWM_1.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:Generated_Source\PSoC5/PWM_1.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:Generated_Source\PSoC5/PWM_1.c ****     *
 809:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 810:Generated_Source\PSoC5/PWM_1.c ****     *  None
 811:Generated_Source\PSoC5/PWM_1.c ****     *
 812:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 813:Generated_Source\PSoC5/PWM_1.c ****     *  uint8/uint16: Current compare value
 814:Generated_Source\PSoC5/PWM_1.c ****     *
 815:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 816:Generated_Source\PSoC5/PWM_1.c ****     uint8 PWM_1_ReadCompare(void) 
 817:Generated_Source\PSoC5/PWM_1.c ****     {
 450              		.loc 1 817 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 0, uses_anonymous_args = 0
 454              		@ link register save eliminated.
 818:Generated_Source\PSoC5/PWM_1.c ****         #if(PWM_1_UsingFixedFunction)
 819:Generated_Source\PSoC5/PWM_1.c ****             return ((uint8)CY_GET_REG16(PWM_1_COMPARE1_LSB_PTR));
 820:Generated_Source\PSoC5/PWM_1.c ****         #else
 821:Generated_Source\PSoC5/PWM_1.c ****             return (CY_GET_REG8(PWM_1_COMPARE1_LSB_PTR));
 455              		.loc 1 821 0
 456 0000 014B     		ldr	r3, .L48
 457 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 822:Generated_Source\PSoC5/PWM_1.c ****         #endif /* (PWM_1_UsingFixedFunction) */
 823:Generated_Source\PSoC5/PWM_1.c ****     }
 458              		.loc 1 823 0
 459 0004 7047     		bx	lr
 460              	.L49:
 461 0006 00BF     		.align	2
 462              	.L48:
 463 0008 2A640040 		.word	1073767466
 464              		.cfi_endproc
 465              	.LFE14:
 466              		.size	PWM_1_ReadCompare, .-PWM_1_ReadCompare
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 24


 467              		.section	.text.PWM_1_ReadPeriod,"ax",%progbits
 468              		.align	2
 469              		.global	PWM_1_ReadPeriod
 470              		.thumb
 471              		.thumb_func
 472              		.type	PWM_1_ReadPeriod, %function
 473              	PWM_1_ReadPeriod:
 474              	.LFB15:
 824:Generated_Source\PSoC5/PWM_1.c **** 
 825:Generated_Source\PSoC5/PWM_1.c **** #else
 826:Generated_Source\PSoC5/PWM_1.c **** 
 827:Generated_Source\PSoC5/PWM_1.c **** 
 828:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 829:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadCompare1
 830:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 831:Generated_Source\PSoC5/PWM_1.c ****     *
 832:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 833:Generated_Source\PSoC5/PWM_1.c ****     *  Reads the compare value for the compare1 output.
 834:Generated_Source\PSoC5/PWM_1.c ****     *
 835:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 836:Generated_Source\PSoC5/PWM_1.c ****     *  None
 837:Generated_Source\PSoC5/PWM_1.c ****     *
 838:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 839:Generated_Source\PSoC5/PWM_1.c ****     *  uint8/uint16: Current compare value.
 840:Generated_Source\PSoC5/PWM_1.c ****     *
 841:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 842:Generated_Source\PSoC5/PWM_1.c ****     uint8 PWM_1_ReadCompare1(void) 
 843:Generated_Source\PSoC5/PWM_1.c ****     {
 844:Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG8(PWM_1_COMPARE1_LSB_PTR));
 845:Generated_Source\PSoC5/PWM_1.c ****     }
 846:Generated_Source\PSoC5/PWM_1.c **** 
 847:Generated_Source\PSoC5/PWM_1.c **** 
 848:Generated_Source\PSoC5/PWM_1.c ****     /*******************************************************************************
 849:Generated_Source\PSoC5/PWM_1.c ****     * Function Name: PWM_1_ReadCompare2
 850:Generated_Source\PSoC5/PWM_1.c ****     ********************************************************************************
 851:Generated_Source\PSoC5/PWM_1.c ****     *
 852:Generated_Source\PSoC5/PWM_1.c ****     * Summary:
 853:Generated_Source\PSoC5/PWM_1.c ****     *  Reads the compare value for the compare2 output.
 854:Generated_Source\PSoC5/PWM_1.c ****     *
 855:Generated_Source\PSoC5/PWM_1.c ****     * Parameters:
 856:Generated_Source\PSoC5/PWM_1.c ****     *  None
 857:Generated_Source\PSoC5/PWM_1.c ****     *
 858:Generated_Source\PSoC5/PWM_1.c ****     * Return:
 859:Generated_Source\PSoC5/PWM_1.c ****     *  uint8/uint16: Current compare value.
 860:Generated_Source\PSoC5/PWM_1.c ****     *
 861:Generated_Source\PSoC5/PWM_1.c ****     *******************************************************************************/
 862:Generated_Source\PSoC5/PWM_1.c ****     uint8 PWM_1_ReadCompare2(void) 
 863:Generated_Source\PSoC5/PWM_1.c ****     {
 864:Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG8(PWM_1_COMPARE2_LSB_PTR));
 865:Generated_Source\PSoC5/PWM_1.c ****     }
 866:Generated_Source\PSoC5/PWM_1.c **** 
 867:Generated_Source\PSoC5/PWM_1.c **** #endif /* (PWM_1_UseOneCompareMode) */
 868:Generated_Source\PSoC5/PWM_1.c **** 
 869:Generated_Source\PSoC5/PWM_1.c **** 
 870:Generated_Source\PSoC5/PWM_1.c **** /*******************************************************************************
 871:Generated_Source\PSoC5/PWM_1.c **** * Function Name: PWM_1_ReadPeriod
 872:Generated_Source\PSoC5/PWM_1.c **** ********************************************************************************
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 25


 873:Generated_Source\PSoC5/PWM_1.c **** *
 874:Generated_Source\PSoC5/PWM_1.c **** * Summary:
 875:Generated_Source\PSoC5/PWM_1.c **** *  Reads the period value used by the PWM hardware.
 876:Generated_Source\PSoC5/PWM_1.c **** *
 877:Generated_Source\PSoC5/PWM_1.c **** * Parameters:
 878:Generated_Source\PSoC5/PWM_1.c **** *  None
 879:Generated_Source\PSoC5/PWM_1.c **** *
 880:Generated_Source\PSoC5/PWM_1.c **** * Return:
 881:Generated_Source\PSoC5/PWM_1.c **** *  uint8/16: Period value
 882:Generated_Source\PSoC5/PWM_1.c **** *
 883:Generated_Source\PSoC5/PWM_1.c **** *******************************************************************************/
 884:Generated_Source\PSoC5/PWM_1.c **** uint8 PWM_1_ReadPeriod(void) 
 885:Generated_Source\PSoC5/PWM_1.c **** {
 475              		.loc 1 885 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              		@ link register save eliminated.
 886:Generated_Source\PSoC5/PWM_1.c ****     #if(PWM_1_UsingFixedFunction)
 887:Generated_Source\PSoC5/PWM_1.c ****         return ((uint8)CY_GET_REG16(PWM_1_PERIOD_LSB_PTR));
 888:Generated_Source\PSoC5/PWM_1.c ****     #else
 889:Generated_Source\PSoC5/PWM_1.c ****         return (CY_GET_REG8(PWM_1_PERIOD_LSB_PTR));
 480              		.loc 1 889 0
 481 0000 014B     		ldr	r3, .L51
 482 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 890:Generated_Source\PSoC5/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 891:Generated_Source\PSoC5/PWM_1.c **** }
 483              		.loc 1 891 0
 484 0004 7047     		bx	lr
 485              	.L52:
 486 0006 00BF     		.align	2
 487              	.L51:
 488 0008 4A640040 		.word	1073767498
 489              		.cfi_endproc
 490              	.LFE15:
 491              		.size	PWM_1_ReadPeriod, .-PWM_1_ReadPeriod
 492              		.global	PWM_1_initVar
 493              		.bss
 494              		.set	.LANCHOR0,. + 0
 495              		.type	PWM_1_initVar, %object
 496              		.size	PWM_1_initVar, 1
 497              	PWM_1_initVar:
 498 0000 00       		.space	1
 499              		.text
 500              	.Letext0:
 501              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 502              		.file 3 "Generated_Source\\PSoC5\\CyLib.h"
 503              		.section	.debug_info,"",%progbits
 504              	.Ldebug_info0:
 505 0000 2B030000 		.4byte	0x32b
 506 0004 0400     		.2byte	0x4
 507 0006 00000000 		.4byte	.Ldebug_abbrev0
 508 000a 04       		.byte	0x4
 509 000b 01       		.uleb128 0x1
 510 000c 83010000 		.4byte	.LASF38
 511 0010 01       		.byte	0x1
 512 0011 4B020000 		.4byte	.LASF39
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 26


 513 0015 4A000000 		.4byte	.LASF40
 514 0019 00000000 		.4byte	.Ldebug_ranges0+0
 515 001d 00000000 		.4byte	0
 516 0021 00000000 		.4byte	.Ldebug_line0
 517 0025 02       		.uleb128 0x2
 518 0026 01       		.byte	0x1
 519 0027 06       		.byte	0x6
 520 0028 1E030000 		.4byte	.LASF0
 521 002c 02       		.uleb128 0x2
 522 002d 01       		.byte	0x1
 523 002e 08       		.byte	0x8
 524 002f AA000000 		.4byte	.LASF1
 525 0033 02       		.uleb128 0x2
 526 0034 02       		.byte	0x2
 527 0035 05       		.byte	0x5
 528 0036 41010000 		.4byte	.LASF2
 529 003a 02       		.uleb128 0x2
 530 003b 02       		.byte	0x2
 531 003c 07       		.byte	0x7
 532 003d 37000000 		.4byte	.LASF3
 533 0041 02       		.uleb128 0x2
 534 0042 04       		.byte	0x4
 535 0043 05       		.byte	0x5
 536 0044 10030000 		.4byte	.LASF4
 537 0048 02       		.uleb128 0x2
 538 0049 04       		.byte	0x4
 539 004a 07       		.byte	0x7
 540 004b CE000000 		.4byte	.LASF5
 541 004f 02       		.uleb128 0x2
 542 0050 08       		.byte	0x8
 543 0051 05       		.byte	0x5
 544 0052 AB020000 		.4byte	.LASF6
 545 0056 02       		.uleb128 0x2
 546 0057 08       		.byte	0x8
 547 0058 07       		.byte	0x7
 548 0059 93000000 		.4byte	.LASF7
 549 005d 03       		.uleb128 0x3
 550 005e 04       		.byte	0x4
 551 005f 05       		.byte	0x5
 552 0060 696E7400 		.ascii	"int\000"
 553 0064 02       		.uleb128 0x2
 554 0065 04       		.byte	0x4
 555 0066 07       		.byte	0x7
 556 0067 28020000 		.4byte	.LASF8
 557 006b 04       		.uleb128 0x4
 558 006c E0000000 		.4byte	.LASF12
 559 0070 02       		.byte	0x2
 560 0071 9201     		.2byte	0x192
 561 0073 2C000000 		.4byte	0x2c
 562 0077 02       		.uleb128 0x2
 563 0078 04       		.byte	0x4
 564 0079 04       		.byte	0x4
 565 007a 85000000 		.4byte	.LASF9
 566 007e 02       		.uleb128 0x2
 567 007f 08       		.byte	0x8
 568 0080 04       		.byte	0x4
 569 0081 17010000 		.4byte	.LASF10
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 27


 570 0085 02       		.uleb128 0x2
 571 0086 01       		.byte	0x1
 572 0087 08       		.byte	0x8
 573 0088 19030000 		.4byte	.LASF11
 574 008c 04       		.uleb128 0x4
 575 008d B8000000 		.4byte	.LASF13
 576 0091 02       		.byte	0x2
 577 0092 3C02     		.2byte	0x23c
 578 0094 98000000 		.4byte	0x98
 579 0098 05       		.uleb128 0x5
 580 0099 6B000000 		.4byte	0x6b
 581 009d 02       		.uleb128 0x2
 582 009e 04       		.byte	0x4
 583 009f 07       		.byte	0x7
 584 00a0 8F020000 		.4byte	.LASF14
 585 00a4 06       		.uleb128 0x6
 586 00a5 00000000 		.4byte	.LASF15
 587 00a9 01       		.byte	0x1
 588 00aa C7       		.byte	0xc7
 589 00ab 00000000 		.4byte	.LFB2
 590 00af 10000000 		.4byte	.LFE2-.LFB2
 591 00b3 01       		.uleb128 0x1
 592 00b4 9C       		.byte	0x9c
 593 00b5 06       		.uleb128 0x6
 594 00b6 05030000 		.4byte	.LASF16
 595 00ba 01       		.byte	0x1
 596 00bb E9       		.byte	0xe9
 597 00bc 00000000 		.4byte	.LFB3
 598 00c0 10000000 		.4byte	.LFE3-.LFB3
 599 00c4 01       		.uleb128 0x1
 600 00c5 9C       		.byte	0x9c
 601 00c6 07       		.uleb128 0x7
 602 00c7 0D000000 		.4byte	.LASF17
 603 00cb 01       		.byte	0x1
 604 00cc 9301     		.2byte	0x193
 605 00ce 00000000 		.4byte	.LFB4
 606 00d2 0C000000 		.4byte	.LFE4-.LFB4
 607 00d6 01       		.uleb128 0x1
 608 00d7 9C       		.byte	0x9c
 609 00d8 EB000000 		.4byte	0xeb
 610 00dc 08       		.uleb128 0x8
 611 00dd 8B000000 		.4byte	.LASF19
 612 00e1 01       		.byte	0x1
 613 00e2 9301     		.2byte	0x193
 614 00e4 6B000000 		.4byte	0x6b
 615 00e8 01       		.uleb128 0x1
 616 00e9 50       		.byte	0x50
 617 00ea 00       		.byte	0
 618 00eb 09       		.uleb128 0x9
 619 00ec F3020000 		.4byte	.LASF25
 620 00f0 01       		.byte	0x1
 621 00f1 A901     		.2byte	0x1a9
 622 00f3 6B000000 		.4byte	0x6b
 623 00f7 00000000 		.4byte	.LFB5
 624 00fb 14000000 		.4byte	.LFE5-.LFB5
 625 00ff 01       		.uleb128 0x1
 626 0100 9C       		.byte	0x9c
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 28


 627 0101 07       		.uleb128 0x7
 628 0102 E1020000 		.4byte	.LASF18
 629 0106 01       		.byte	0x1
 630 0107 E201     		.2byte	0x1e2
 631 0109 00000000 		.4byte	.LFB7
 632 010d 0C000000 		.4byte	.LFE7-.LFB7
 633 0111 01       		.uleb128 0x1
 634 0112 9C       		.byte	0x9c
 635 0113 26010000 		.4byte	0x126
 636 0117 08       		.uleb128 0x8
 637 0118 20000000 		.4byte	.LASF20
 638 011c 01       		.byte	0x1
 639 011d E201     		.2byte	0x1e2
 640 011f 6B000000 		.4byte	0x6b
 641 0123 01       		.uleb128 0x1
 642 0124 50       		.byte	0x50
 643 0125 00       		.byte	0
 644 0126 07       		.uleb128 0x7
 645 0127 98020000 		.4byte	.LASF21
 646 012b 01       		.byte	0x1
 647 012c 0402     		.2byte	0x204
 648 012e 00000000 		.4byte	.LFB8
 649 0132 0C000000 		.4byte	.LFE8-.LFB8
 650 0136 01       		.uleb128 0x1
 651 0137 9C       		.byte	0x9c
 652 0138 4B010000 		.4byte	0x14b
 653 013c 08       		.uleb128 0x8
 654 013d 2A030000 		.4byte	.LASF22
 655 0141 01       		.byte	0x1
 656 0142 0402     		.2byte	0x204
 657 0144 6B000000 		.4byte	0x6b
 658 0148 01       		.uleb128 0x1
 659 0149 50       		.byte	0x50
 660 014a 00       		.byte	0
 661 014b 07       		.uleb128 0x7
 662 014c EE000000 		.4byte	.LASF23
 663 0150 01       		.byte	0x1
 664 0151 AC02     		.2byte	0x2ac
 665 0153 00000000 		.4byte	.LFB9
 666 0157 0C000000 		.4byte	.LFE9-.LFB9
 667 015b 01       		.uleb128 0x1
 668 015c 9C       		.byte	0x9c
 669 015d 70010000 		.4byte	0x170
 670 0161 08       		.uleb128 0x8
 671 0162 D3020000 		.4byte	.LASF24
 672 0166 01       		.byte	0x1
 673 0167 AC02     		.2byte	0x2ac
 674 0169 6B000000 		.4byte	0x6b
 675 016d 01       		.uleb128 0x1
 676 016e 50       		.byte	0x50
 677 016f 00       		.byte	0
 678 0170 09       		.uleb128 0x9
 679 0171 71020000 		.4byte	.LASF26
 680 0175 01       		.byte	0x1
 681 0176 C702     		.2byte	0x2c7
 682 0178 6B000000 		.4byte	0x6b
 683 017c 00000000 		.4byte	.LFB10
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 29


 684 0180 0C000000 		.4byte	.LFE10-.LFB10
 685 0184 01       		.uleb128 0x1
 686 0185 9C       		.byte	0x9c
 687 0186 0A       		.uleb128 0xa
 688 0187 B9020000 		.4byte	.LASF41
 689 018b 01       		.byte	0x1
 690 018c E102     		.2byte	0x2e1
 691 018e 6B000000 		.4byte	0x6b
 692 0192 00000000 		.4byte	.LFB11
 693 0196 0C000000 		.4byte	.LFE11-.LFB11
 694 019a 01       		.uleb128 0x1
 695 019b 9C       		.byte	0x9c
 696 019c AF010000 		.4byte	0x1af
 697 01a0 0B       		.uleb128 0xb
 698 01a1 6A020000 		.4byte	.LASF32
 699 01a5 01       		.byte	0x1
 700 01a6 E302     		.2byte	0x2e3
 701 01a8 6B000000 		.4byte	0x6b
 702 01ac 01       		.uleb128 0x1
 703 01ad 50       		.byte	0x50
 704 01ae 00       		.byte	0
 705 01af 07       		.uleb128 0x7
 706 01b0 5D010000 		.4byte	.LASF27
 707 01b4 01       		.byte	0x1
 708 01b5 FD02     		.2byte	0x2fd
 709 01b7 00000000 		.4byte	.LFB12
 710 01bb 0C000000 		.4byte	.LFE12-.LFB12
 711 01bf 01       		.uleb128 0x1
 712 01c0 9C       		.byte	0x9c
 713 01c1 D4010000 		.4byte	0x1d4
 714 01c5 08       		.uleb128 0x8
 715 01c6 E6000000 		.4byte	.LASF28
 716 01ca 01       		.byte	0x1
 717 01cb FD02     		.2byte	0x2fd
 718 01cd 6B000000 		.4byte	0x6b
 719 01d1 01       		.uleb128 0x1
 720 01d2 50       		.byte	0x50
 721 01d3 00       		.byte	0
 722 01d4 09       		.uleb128 0x9
 723 01d5 4B010000 		.4byte	.LASF29
 724 01d9 01       		.byte	0x1
 725 01da 1603     		.2byte	0x316
 726 01dc 6B000000 		.4byte	0x6b
 727 01e0 00000000 		.4byte	.LFB13
 728 01e4 0C000000 		.4byte	.LFE13-.LFB13
 729 01e8 01       		.uleb128 0x1
 730 01e9 9C       		.byte	0x9c
 731 01ea 07       		.uleb128 0x7
 732 01eb 27000000 		.4byte	.LASF30
 733 01ef 01       		.byte	0x1
 734 01f0 C501     		.2byte	0x1c5
 735 01f2 00000000 		.4byte	.LFB6
 736 01f6 14000000 		.4byte	.LFE6-.LFB6
 737 01fa 01       		.uleb128 0x1
 738 01fb 9C       		.byte	0x9c
 739 01fc 13020000 		.4byte	0x213
 740 0200 0C       		.uleb128 0xc
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 30


 741 0201 08000000 		.4byte	.LVL6
 742 0205 D4010000 		.4byte	0x1d4
 743 0209 0C       		.uleb128 0xc
 744 020a 0C000000 		.4byte	.LVL7
 745 020e 70010000 		.4byte	0x170
 746 0212 00       		.byte	0
 747 0213 0D       		.uleb128 0xd
 748 0214 78010000 		.4byte	.LASF31
 749 0218 01       		.byte	0x1
 750 0219 54       		.byte	0x54
 751 021a 00000000 		.4byte	.LFB1
 752 021e 54000000 		.4byte	.LFE1-.LFB1
 753 0222 01       		.uleb128 0x1
 754 0223 9C       		.byte	0x9c
 755 0224 B1020000 		.4byte	0x2b1
 756 0228 0E       		.uleb128 0xe
 757 0229 8A020000 		.4byte	.LASF33
 758 022d 01       		.byte	0x1
 759 022e 57       		.byte	0x57
 760 022f 6B000000 		.4byte	0x6b
 761 0233 00000000 		.4byte	.LLST0
 762 0237 0E       		.uleb128 0xe
 763 0238 1E010000 		.4byte	.LASF34
 764 023c 01       		.byte	0x1
 765 023d 5D       		.byte	0x5d
 766 023e 6B000000 		.4byte	0x6b
 767 0242 13000000 		.4byte	.LLST1
 768 0246 0F       		.uleb128 0xf
 769 0247 20000000 		.4byte	.LVL10
 770 024b C6000000 		.4byte	0xc6
 771 024f 5A020000 		.4byte	0x25a
 772 0253 10       		.uleb128 0x10
 773 0254 01       		.uleb128 0x1
 774 0255 50       		.byte	0x50
 775 0256 02       		.uleb128 0x2
 776 0257 09       		.byte	0x9
 777 0258 FF       		.byte	0xff
 778 0259 00       		.byte	0
 779 025a 0F       		.uleb128 0xf
 780 025b 26000000 		.4byte	.LVL11
 781 025f 01010000 		.4byte	0x101
 782 0263 6E020000 		.4byte	0x26e
 783 0267 10       		.uleb128 0x10
 784 0268 01       		.uleb128 0x1
 785 0269 50       		.byte	0x50
 786 026a 02       		.uleb128 0x2
 787 026b 09       		.byte	0x9
 788 026c FF       		.byte	0xff
 789 026d 00       		.byte	0
 790 026e 0F       		.uleb128 0xf
 791 026f 2C000000 		.4byte	.LVL12
 792 0273 26010000 		.4byte	0x126
 793 0277 82020000 		.4byte	0x282
 794 027b 10       		.uleb128 0x10
 795 027c 01       		.uleb128 0x1
 796 027d 50       		.byte	0x50
 797 027e 02       		.uleb128 0x2
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 31


 798 027f 08       		.byte	0x8
 799 0280 7F       		.byte	0x7f
 800 0281 00       		.byte	0
 801 0282 0F       		.uleb128 0xf
 802 0283 32000000 		.4byte	.LVL13
 803 0287 4B010000 		.4byte	0x14b
 804 028b 95020000 		.4byte	0x295
 805 028f 10       		.uleb128 0x10
 806 0290 01       		.uleb128 0x1
 807 0291 50       		.byte	0x50
 808 0292 01       		.uleb128 0x1
 809 0293 30       		.byte	0x30
 810 0294 00       		.byte	0
 811 0295 0C       		.uleb128 0xc
 812 0296 36000000 		.4byte	.LVL14
 813 029a 16030000 		.4byte	0x316
 814 029e 0C       		.uleb128 0xc
 815 029f 44000000 		.4byte	.LVL15
 816 02a3 21030000 		.4byte	0x321
 817 02a7 0C       		.uleb128 0xc
 818 02a8 48000000 		.4byte	.LVL16
 819 02ac EA010000 		.4byte	0x1ea
 820 02b0 00       		.byte	0
 821 02b1 0D       		.uleb128 0xd
 822 02b2 32030000 		.4byte	.LASF35
 823 02b6 01       		.byte	0x1
 824 02b7 37       		.byte	0x37
 825 02b8 00000000 		.4byte	.LFB0
 826 02bc 1C000000 		.4byte	.LFE0-.LFB0
 827 02c0 01       		.uleb128 0x1
 828 02c1 9C       		.byte	0x9c
 829 02c2 D9020000 		.4byte	0x2d9
 830 02c6 0C       		.uleb128 0xc
 831 02c7 0C000000 		.4byte	.LVL17
 832 02cb 13020000 		.4byte	0x213
 833 02cf 0C       		.uleb128 0xc
 834 02d0 16000000 		.4byte	.LVL18
 835 02d4 A4000000 		.4byte	0xa4
 836 02d8 00       		.byte	0
 837 02d9 09       		.uleb128 0x9
 838 02da 05010000 		.4byte	.LASF36
 839 02de 01       		.byte	0x1
 840 02df 3003     		.2byte	0x330
 841 02e1 6B000000 		.4byte	0x6b
 842 02e5 00000000 		.4byte	.LFB14
 843 02e9 0C000000 		.4byte	.LFE14-.LFB14
 844 02ed 01       		.uleb128 0x1
 845 02ee 9C       		.byte	0x9c
 846 02ef 09       		.uleb128 0x9
 847 02f0 BD000000 		.4byte	.LASF37
 848 02f4 01       		.byte	0x1
 849 02f5 7403     		.2byte	0x374
 850 02f7 6B000000 		.4byte	0x6b
 851 02fb 00000000 		.4byte	.LFB15
 852 02ff 0C000000 		.4byte	.LFE15-.LFB15
 853 0303 01       		.uleb128 0x1
 854 0304 9C       		.byte	0x9c
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 32


 855 0305 11       		.uleb128 0x11
 856 0306 33010000 		.4byte	.LASF42
 857 030a 01       		.byte	0x1
 858 030b 20       		.byte	0x20
 859 030c 6B000000 		.4byte	0x6b
 860 0310 05       		.uleb128 0x5
 861 0311 03       		.byte	0x3
 862 0312 00000000 		.4byte	PWM_1_initVar
 863 0316 12       		.uleb128 0x12
 864 0317 11020000 		.4byte	.LASF43
 865 031b 03       		.byte	0x3
 866 031c 7D       		.byte	0x7d
 867 031d 6B000000 		.4byte	0x6b
 868 0321 13       		.uleb128 0x13
 869 0322 35020000 		.4byte	.LASF44
 870 0326 03       		.byte	0x3
 871 0327 7E       		.byte	0x7e
 872 0328 14       		.uleb128 0x14
 873 0329 6B000000 		.4byte	0x6b
 874 032d 00       		.byte	0
 875 032e 00       		.byte	0
 876              		.section	.debug_abbrev,"",%progbits
 877              	.Ldebug_abbrev0:
 878 0000 01       		.uleb128 0x1
 879 0001 11       		.uleb128 0x11
 880 0002 01       		.byte	0x1
 881 0003 25       		.uleb128 0x25
 882 0004 0E       		.uleb128 0xe
 883 0005 13       		.uleb128 0x13
 884 0006 0B       		.uleb128 0xb
 885 0007 03       		.uleb128 0x3
 886 0008 0E       		.uleb128 0xe
 887 0009 1B       		.uleb128 0x1b
 888 000a 0E       		.uleb128 0xe
 889 000b 55       		.uleb128 0x55
 890 000c 17       		.uleb128 0x17
 891 000d 11       		.uleb128 0x11
 892 000e 01       		.uleb128 0x1
 893 000f 10       		.uleb128 0x10
 894 0010 17       		.uleb128 0x17
 895 0011 00       		.byte	0
 896 0012 00       		.byte	0
 897 0013 02       		.uleb128 0x2
 898 0014 24       		.uleb128 0x24
 899 0015 00       		.byte	0
 900 0016 0B       		.uleb128 0xb
 901 0017 0B       		.uleb128 0xb
 902 0018 3E       		.uleb128 0x3e
 903 0019 0B       		.uleb128 0xb
 904 001a 03       		.uleb128 0x3
 905 001b 0E       		.uleb128 0xe
 906 001c 00       		.byte	0
 907 001d 00       		.byte	0
 908 001e 03       		.uleb128 0x3
 909 001f 24       		.uleb128 0x24
 910 0020 00       		.byte	0
 911 0021 0B       		.uleb128 0xb
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 33


 912 0022 0B       		.uleb128 0xb
 913 0023 3E       		.uleb128 0x3e
 914 0024 0B       		.uleb128 0xb
 915 0025 03       		.uleb128 0x3
 916 0026 08       		.uleb128 0x8
 917 0027 00       		.byte	0
 918 0028 00       		.byte	0
 919 0029 04       		.uleb128 0x4
 920 002a 16       		.uleb128 0x16
 921 002b 00       		.byte	0
 922 002c 03       		.uleb128 0x3
 923 002d 0E       		.uleb128 0xe
 924 002e 3A       		.uleb128 0x3a
 925 002f 0B       		.uleb128 0xb
 926 0030 3B       		.uleb128 0x3b
 927 0031 05       		.uleb128 0x5
 928 0032 49       		.uleb128 0x49
 929 0033 13       		.uleb128 0x13
 930 0034 00       		.byte	0
 931 0035 00       		.byte	0
 932 0036 05       		.uleb128 0x5
 933 0037 35       		.uleb128 0x35
 934 0038 00       		.byte	0
 935 0039 49       		.uleb128 0x49
 936 003a 13       		.uleb128 0x13
 937 003b 00       		.byte	0
 938 003c 00       		.byte	0
 939 003d 06       		.uleb128 0x6
 940 003e 2E       		.uleb128 0x2e
 941 003f 00       		.byte	0
 942 0040 3F       		.uleb128 0x3f
 943 0041 19       		.uleb128 0x19
 944 0042 03       		.uleb128 0x3
 945 0043 0E       		.uleb128 0xe
 946 0044 3A       		.uleb128 0x3a
 947 0045 0B       		.uleb128 0xb
 948 0046 3B       		.uleb128 0x3b
 949 0047 0B       		.uleb128 0xb
 950 0048 27       		.uleb128 0x27
 951 0049 19       		.uleb128 0x19
 952 004a 11       		.uleb128 0x11
 953 004b 01       		.uleb128 0x1
 954 004c 12       		.uleb128 0x12
 955 004d 06       		.uleb128 0x6
 956 004e 40       		.uleb128 0x40
 957 004f 18       		.uleb128 0x18
 958 0050 9742     		.uleb128 0x2117
 959 0052 19       		.uleb128 0x19
 960 0053 00       		.byte	0
 961 0054 00       		.byte	0
 962 0055 07       		.uleb128 0x7
 963 0056 2E       		.uleb128 0x2e
 964 0057 01       		.byte	0x1
 965 0058 3F       		.uleb128 0x3f
 966 0059 19       		.uleb128 0x19
 967 005a 03       		.uleb128 0x3
 968 005b 0E       		.uleb128 0xe
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 34


 969 005c 3A       		.uleb128 0x3a
 970 005d 0B       		.uleb128 0xb
 971 005e 3B       		.uleb128 0x3b
 972 005f 05       		.uleb128 0x5
 973 0060 27       		.uleb128 0x27
 974 0061 19       		.uleb128 0x19
 975 0062 11       		.uleb128 0x11
 976 0063 01       		.uleb128 0x1
 977 0064 12       		.uleb128 0x12
 978 0065 06       		.uleb128 0x6
 979 0066 40       		.uleb128 0x40
 980 0067 18       		.uleb128 0x18
 981 0068 9742     		.uleb128 0x2117
 982 006a 19       		.uleb128 0x19
 983 006b 01       		.uleb128 0x1
 984 006c 13       		.uleb128 0x13
 985 006d 00       		.byte	0
 986 006e 00       		.byte	0
 987 006f 08       		.uleb128 0x8
 988 0070 05       		.uleb128 0x5
 989 0071 00       		.byte	0
 990 0072 03       		.uleb128 0x3
 991 0073 0E       		.uleb128 0xe
 992 0074 3A       		.uleb128 0x3a
 993 0075 0B       		.uleb128 0xb
 994 0076 3B       		.uleb128 0x3b
 995 0077 05       		.uleb128 0x5
 996 0078 49       		.uleb128 0x49
 997 0079 13       		.uleb128 0x13
 998 007a 02       		.uleb128 0x2
 999 007b 18       		.uleb128 0x18
 1000 007c 00       		.byte	0
 1001 007d 00       		.byte	0
 1002 007e 09       		.uleb128 0x9
 1003 007f 2E       		.uleb128 0x2e
 1004 0080 00       		.byte	0
 1005 0081 3F       		.uleb128 0x3f
 1006 0082 19       		.uleb128 0x19
 1007 0083 03       		.uleb128 0x3
 1008 0084 0E       		.uleb128 0xe
 1009 0085 3A       		.uleb128 0x3a
 1010 0086 0B       		.uleb128 0xb
 1011 0087 3B       		.uleb128 0x3b
 1012 0088 05       		.uleb128 0x5
 1013 0089 27       		.uleb128 0x27
 1014 008a 19       		.uleb128 0x19
 1015 008b 49       		.uleb128 0x49
 1016 008c 13       		.uleb128 0x13
 1017 008d 11       		.uleb128 0x11
 1018 008e 01       		.uleb128 0x1
 1019 008f 12       		.uleb128 0x12
 1020 0090 06       		.uleb128 0x6
 1021 0091 40       		.uleb128 0x40
 1022 0092 18       		.uleb128 0x18
 1023 0093 9742     		.uleb128 0x2117
 1024 0095 19       		.uleb128 0x19
 1025 0096 00       		.byte	0
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 35


 1026 0097 00       		.byte	0
 1027 0098 0A       		.uleb128 0xa
 1028 0099 2E       		.uleb128 0x2e
 1029 009a 01       		.byte	0x1
 1030 009b 3F       		.uleb128 0x3f
 1031 009c 19       		.uleb128 0x19
 1032 009d 03       		.uleb128 0x3
 1033 009e 0E       		.uleb128 0xe
 1034 009f 3A       		.uleb128 0x3a
 1035 00a0 0B       		.uleb128 0xb
 1036 00a1 3B       		.uleb128 0x3b
 1037 00a2 05       		.uleb128 0x5
 1038 00a3 27       		.uleb128 0x27
 1039 00a4 19       		.uleb128 0x19
 1040 00a5 49       		.uleb128 0x49
 1041 00a6 13       		.uleb128 0x13
 1042 00a7 11       		.uleb128 0x11
 1043 00a8 01       		.uleb128 0x1
 1044 00a9 12       		.uleb128 0x12
 1045 00aa 06       		.uleb128 0x6
 1046 00ab 40       		.uleb128 0x40
 1047 00ac 18       		.uleb128 0x18
 1048 00ad 9742     		.uleb128 0x2117
 1049 00af 19       		.uleb128 0x19
 1050 00b0 01       		.uleb128 0x1
 1051 00b1 13       		.uleb128 0x13
 1052 00b2 00       		.byte	0
 1053 00b3 00       		.byte	0
 1054 00b4 0B       		.uleb128 0xb
 1055 00b5 34       		.uleb128 0x34
 1056 00b6 00       		.byte	0
 1057 00b7 03       		.uleb128 0x3
 1058 00b8 0E       		.uleb128 0xe
 1059 00b9 3A       		.uleb128 0x3a
 1060 00ba 0B       		.uleb128 0xb
 1061 00bb 3B       		.uleb128 0x3b
 1062 00bc 05       		.uleb128 0x5
 1063 00bd 49       		.uleb128 0x49
 1064 00be 13       		.uleb128 0x13
 1065 00bf 02       		.uleb128 0x2
 1066 00c0 18       		.uleb128 0x18
 1067 00c1 00       		.byte	0
 1068 00c2 00       		.byte	0
 1069 00c3 0C       		.uleb128 0xc
 1070 00c4 898201   		.uleb128 0x4109
 1071 00c7 00       		.byte	0
 1072 00c8 11       		.uleb128 0x11
 1073 00c9 01       		.uleb128 0x1
 1074 00ca 31       		.uleb128 0x31
 1075 00cb 13       		.uleb128 0x13
 1076 00cc 00       		.byte	0
 1077 00cd 00       		.byte	0
 1078 00ce 0D       		.uleb128 0xd
 1079 00cf 2E       		.uleb128 0x2e
 1080 00d0 01       		.byte	0x1
 1081 00d1 3F       		.uleb128 0x3f
 1082 00d2 19       		.uleb128 0x19
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 36


 1083 00d3 03       		.uleb128 0x3
 1084 00d4 0E       		.uleb128 0xe
 1085 00d5 3A       		.uleb128 0x3a
 1086 00d6 0B       		.uleb128 0xb
 1087 00d7 3B       		.uleb128 0x3b
 1088 00d8 0B       		.uleb128 0xb
 1089 00d9 27       		.uleb128 0x27
 1090 00da 19       		.uleb128 0x19
 1091 00db 11       		.uleb128 0x11
 1092 00dc 01       		.uleb128 0x1
 1093 00dd 12       		.uleb128 0x12
 1094 00de 06       		.uleb128 0x6
 1095 00df 40       		.uleb128 0x40
 1096 00e0 18       		.uleb128 0x18
 1097 00e1 9742     		.uleb128 0x2117
 1098 00e3 19       		.uleb128 0x19
 1099 00e4 01       		.uleb128 0x1
 1100 00e5 13       		.uleb128 0x13
 1101 00e6 00       		.byte	0
 1102 00e7 00       		.byte	0
 1103 00e8 0E       		.uleb128 0xe
 1104 00e9 34       		.uleb128 0x34
 1105 00ea 00       		.byte	0
 1106 00eb 03       		.uleb128 0x3
 1107 00ec 0E       		.uleb128 0xe
 1108 00ed 3A       		.uleb128 0x3a
 1109 00ee 0B       		.uleb128 0xb
 1110 00ef 3B       		.uleb128 0x3b
 1111 00f0 0B       		.uleb128 0xb
 1112 00f1 49       		.uleb128 0x49
 1113 00f2 13       		.uleb128 0x13
 1114 00f3 02       		.uleb128 0x2
 1115 00f4 17       		.uleb128 0x17
 1116 00f5 00       		.byte	0
 1117 00f6 00       		.byte	0
 1118 00f7 0F       		.uleb128 0xf
 1119 00f8 898201   		.uleb128 0x4109
 1120 00fb 01       		.byte	0x1
 1121 00fc 11       		.uleb128 0x11
 1122 00fd 01       		.uleb128 0x1
 1123 00fe 31       		.uleb128 0x31
 1124 00ff 13       		.uleb128 0x13
 1125 0100 01       		.uleb128 0x1
 1126 0101 13       		.uleb128 0x13
 1127 0102 00       		.byte	0
 1128 0103 00       		.byte	0
 1129 0104 10       		.uleb128 0x10
 1130 0105 8A8201   		.uleb128 0x410a
 1131 0108 00       		.byte	0
 1132 0109 02       		.uleb128 0x2
 1133 010a 18       		.uleb128 0x18
 1134 010b 9142     		.uleb128 0x2111
 1135 010d 18       		.uleb128 0x18
 1136 010e 00       		.byte	0
 1137 010f 00       		.byte	0
 1138 0110 11       		.uleb128 0x11
 1139 0111 34       		.uleb128 0x34
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 37


 1140 0112 00       		.byte	0
 1141 0113 03       		.uleb128 0x3
 1142 0114 0E       		.uleb128 0xe
 1143 0115 3A       		.uleb128 0x3a
 1144 0116 0B       		.uleb128 0xb
 1145 0117 3B       		.uleb128 0x3b
 1146 0118 0B       		.uleb128 0xb
 1147 0119 49       		.uleb128 0x49
 1148 011a 13       		.uleb128 0x13
 1149 011b 3F       		.uleb128 0x3f
 1150 011c 19       		.uleb128 0x19
 1151 011d 02       		.uleb128 0x2
 1152 011e 18       		.uleb128 0x18
 1153 011f 00       		.byte	0
 1154 0120 00       		.byte	0
 1155 0121 12       		.uleb128 0x12
 1156 0122 2E       		.uleb128 0x2e
 1157 0123 00       		.byte	0
 1158 0124 3F       		.uleb128 0x3f
 1159 0125 19       		.uleb128 0x19
 1160 0126 03       		.uleb128 0x3
 1161 0127 0E       		.uleb128 0xe
 1162 0128 3A       		.uleb128 0x3a
 1163 0129 0B       		.uleb128 0xb
 1164 012a 3B       		.uleb128 0x3b
 1165 012b 0B       		.uleb128 0xb
 1166 012c 27       		.uleb128 0x27
 1167 012d 19       		.uleb128 0x19
 1168 012e 49       		.uleb128 0x49
 1169 012f 13       		.uleb128 0x13
 1170 0130 3C       		.uleb128 0x3c
 1171 0131 19       		.uleb128 0x19
 1172 0132 00       		.byte	0
 1173 0133 00       		.byte	0
 1174 0134 13       		.uleb128 0x13
 1175 0135 2E       		.uleb128 0x2e
 1176 0136 01       		.byte	0x1
 1177 0137 3F       		.uleb128 0x3f
 1178 0138 19       		.uleb128 0x19
 1179 0139 03       		.uleb128 0x3
 1180 013a 0E       		.uleb128 0xe
 1181 013b 3A       		.uleb128 0x3a
 1182 013c 0B       		.uleb128 0xb
 1183 013d 3B       		.uleb128 0x3b
 1184 013e 0B       		.uleb128 0xb
 1185 013f 27       		.uleb128 0x27
 1186 0140 19       		.uleb128 0x19
 1187 0141 3C       		.uleb128 0x3c
 1188 0142 19       		.uleb128 0x19
 1189 0143 00       		.byte	0
 1190 0144 00       		.byte	0
 1191 0145 14       		.uleb128 0x14
 1192 0146 05       		.uleb128 0x5
 1193 0147 00       		.byte	0
 1194 0148 49       		.uleb128 0x49
 1195 0149 13       		.uleb128 0x13
 1196 014a 00       		.byte	0
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 38


 1197 014b 00       		.byte	0
 1198 014c 00       		.byte	0
 1199              		.section	.debug_loc,"",%progbits
 1200              	.Ldebug_loc0:
 1201              	.LLST0:
 1202 0000 0A000000 		.4byte	.LVL8
 1203 0004 0E000000 		.4byte	.LVL9
 1204 0008 0100     		.2byte	0x1
 1205 000a 53       		.byte	0x53
 1206 000b 00000000 		.4byte	0
 1207 000f 00000000 		.4byte	0
 1208              	.LLST1:
 1209 0013 36000000 		.4byte	.LVL14
 1210 0017 43000000 		.4byte	.LVL15-1
 1211 001b 0100     		.2byte	0x1
 1212 001d 50       		.byte	0x50
 1213 001e 00000000 		.4byte	0
 1214 0022 00000000 		.4byte	0
 1215              		.section	.debug_aranges,"",%progbits
 1216 0000 94000000 		.4byte	0x94
 1217 0004 0200     		.2byte	0x2
 1218 0006 00000000 		.4byte	.Ldebug_info0
 1219 000a 04       		.byte	0x4
 1220 000b 00       		.byte	0
 1221 000c 0000     		.2byte	0
 1222 000e 0000     		.2byte	0
 1223 0010 00000000 		.4byte	.LFB2
 1224 0014 10000000 		.4byte	.LFE2-.LFB2
 1225 0018 00000000 		.4byte	.LFB3
 1226 001c 10000000 		.4byte	.LFE3-.LFB3
 1227 0020 00000000 		.4byte	.LFB4
 1228 0024 0C000000 		.4byte	.LFE4-.LFB4
 1229 0028 00000000 		.4byte	.LFB5
 1230 002c 14000000 		.4byte	.LFE5-.LFB5
 1231 0030 00000000 		.4byte	.LFB7
 1232 0034 0C000000 		.4byte	.LFE7-.LFB7
 1233 0038 00000000 		.4byte	.LFB8
 1234 003c 0C000000 		.4byte	.LFE8-.LFB8
 1235 0040 00000000 		.4byte	.LFB9
 1236 0044 0C000000 		.4byte	.LFE9-.LFB9
 1237 0048 00000000 		.4byte	.LFB10
 1238 004c 0C000000 		.4byte	.LFE10-.LFB10
 1239 0050 00000000 		.4byte	.LFB11
 1240 0054 0C000000 		.4byte	.LFE11-.LFB11
 1241 0058 00000000 		.4byte	.LFB12
 1242 005c 0C000000 		.4byte	.LFE12-.LFB12
 1243 0060 00000000 		.4byte	.LFB13
 1244 0064 0C000000 		.4byte	.LFE13-.LFB13
 1245 0068 00000000 		.4byte	.LFB6
 1246 006c 14000000 		.4byte	.LFE6-.LFB6
 1247 0070 00000000 		.4byte	.LFB1
 1248 0074 54000000 		.4byte	.LFE1-.LFB1
 1249 0078 00000000 		.4byte	.LFB0
 1250 007c 1C000000 		.4byte	.LFE0-.LFB0
 1251 0080 00000000 		.4byte	.LFB14
 1252 0084 0C000000 		.4byte	.LFE14-.LFB14
 1253 0088 00000000 		.4byte	.LFB15
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 39


 1254 008c 0C000000 		.4byte	.LFE15-.LFB15
 1255 0090 00000000 		.4byte	0
 1256 0094 00000000 		.4byte	0
 1257              		.section	.debug_ranges,"",%progbits
 1258              	.Ldebug_ranges0:
 1259 0000 00000000 		.4byte	.LFB2
 1260 0004 10000000 		.4byte	.LFE2
 1261 0008 00000000 		.4byte	.LFB3
 1262 000c 10000000 		.4byte	.LFE3
 1263 0010 00000000 		.4byte	.LFB4
 1264 0014 0C000000 		.4byte	.LFE4
 1265 0018 00000000 		.4byte	.LFB5
 1266 001c 14000000 		.4byte	.LFE5
 1267 0020 00000000 		.4byte	.LFB7
 1268 0024 0C000000 		.4byte	.LFE7
 1269 0028 00000000 		.4byte	.LFB8
 1270 002c 0C000000 		.4byte	.LFE8
 1271 0030 00000000 		.4byte	.LFB9
 1272 0034 0C000000 		.4byte	.LFE9
 1273 0038 00000000 		.4byte	.LFB10
 1274 003c 0C000000 		.4byte	.LFE10
 1275 0040 00000000 		.4byte	.LFB11
 1276 0044 0C000000 		.4byte	.LFE11
 1277 0048 00000000 		.4byte	.LFB12
 1278 004c 0C000000 		.4byte	.LFE12
 1279 0050 00000000 		.4byte	.LFB13
 1280 0054 0C000000 		.4byte	.LFE13
 1281 0058 00000000 		.4byte	.LFB6
 1282 005c 14000000 		.4byte	.LFE6
 1283 0060 00000000 		.4byte	.LFB1
 1284 0064 54000000 		.4byte	.LFE1
 1285 0068 00000000 		.4byte	.LFB0
 1286 006c 1C000000 		.4byte	.LFE0
 1287 0070 00000000 		.4byte	.LFB14
 1288 0074 0C000000 		.4byte	.LFE14
 1289 0078 00000000 		.4byte	.LFB15
 1290 007c 0C000000 		.4byte	.LFE15
 1291 0080 00000000 		.4byte	0
 1292 0084 00000000 		.4byte	0
 1293              		.section	.debug_line,"",%progbits
 1294              	.Ldebug_line0:
 1295 0000 81010000 		.section	.debug_str,"MS",%progbits,1
 1295      02004D00 
 1295      00000201 
 1295      FB0E0D00 
 1295      01010101 
 1296              	.LASF15:
 1297 0000 50574D5F 		.ascii	"PWM_1_Enable\000"
 1297      315F456E 
 1297      61626C65 
 1297      00
 1298              	.LASF17:
 1299 000d 50574D5F 		.ascii	"PWM_1_WriteCounter\000"
 1299      315F5772 
 1299      69746543 
 1299      6F756E74 
 1299      657200
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 40


 1300              	.LASF20:
 1301 0020 70657269 		.ascii	"period\000"
 1301      6F6400
 1302              	.LASF30:
 1303 0027 50574D5F 		.ascii	"PWM_1_ClearFIFO\000"
 1303      315F436C 
 1303      65617246 
 1303      49464F00 
 1304              	.LASF3:
 1305 0037 73686F72 		.ascii	"short unsigned int\000"
 1305      7420756E 
 1305      7369676E 
 1305      65642069 
 1305      6E7400
 1306              	.LASF40:
 1307 004a 443A5C4C 		.ascii	"D:\\LLGD\\3LLWork\\0PrjSyn\\PSOC\\HNP3_ECB_WS\\Basi"
 1307      4C47445C 
 1307      334C4C57 
 1307      6F726B5C 
 1307      3050726A 
 1308 0077 635F5365 		.ascii	"c_Setup.cydsn\000"
 1308      7475702E 
 1308      63796473 
 1308      6E00
 1309              	.LASF9:
 1310 0085 666C6F61 		.ascii	"float\000"
 1310      7400
 1311              	.LASF19:
 1312 008b 636F756E 		.ascii	"counter\000"
 1312      74657200 
 1313              	.LASF7:
 1314 0093 6C6F6E67 		.ascii	"long long unsigned int\000"
 1314      206C6F6E 
 1314      6720756E 
 1314      7369676E 
 1314      65642069 
 1315              	.LASF1:
 1316 00aa 756E7369 		.ascii	"unsigned char\000"
 1316      676E6564 
 1316      20636861 
 1316      7200
 1317              	.LASF13:
 1318 00b8 72656738 		.ascii	"reg8\000"
 1318      00
 1319              	.LASF37:
 1320 00bd 50574D5F 		.ascii	"PWM_1_ReadPeriod\000"
 1320      315F5265 
 1320      61645065 
 1320      72696F64 
 1320      00
 1321              	.LASF5:
 1322 00ce 6C6F6E67 		.ascii	"long unsigned int\000"
 1322      20756E73 
 1322      69676E65 
 1322      6420696E 
 1322      7400
 1323              	.LASF12:
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 41


 1324 00e0 75696E74 		.ascii	"uint8\000"
 1324      3800
 1325              	.LASF28:
 1326 00e6 636F6E74 		.ascii	"control\000"
 1326      726F6C00 
 1327              	.LASF23:
 1328 00ee 50574D5F 		.ascii	"PWM_1_SetInterruptMode\000"
 1328      315F5365 
 1328      74496E74 
 1328      65727275 
 1328      70744D6F 
 1329              	.LASF36:
 1330 0105 50574D5F 		.ascii	"PWM_1_ReadCompare\000"
 1330      315F5265 
 1330      6164436F 
 1330      6D706172 
 1330      6500
 1331              	.LASF10:
 1332 0117 646F7562 		.ascii	"double\000"
 1332      6C6500
 1333              	.LASF34:
 1334 011e 50574D5F 		.ascii	"PWM_1_interruptState\000"
 1334      315F696E 
 1334      74657272 
 1334      75707453 
 1334      74617465 
 1335              	.LASF42:
 1336 0133 50574D5F 		.ascii	"PWM_1_initVar\000"
 1336      315F696E 
 1336      69745661 
 1336      7200
 1337              	.LASF2:
 1338 0141 73686F72 		.ascii	"short int\000"
 1338      7420696E 
 1338      7400
 1339              	.LASF29:
 1340 014b 50574D5F 		.ascii	"PWM_1_ReadCapture\000"
 1340      315F5265 
 1340      61644361 
 1340      70747572 
 1340      6500
 1341              	.LASF27:
 1342 015d 50574D5F 		.ascii	"PWM_1_WriteControlRegister\000"
 1342      315F5772 
 1342      69746543 
 1342      6F6E7472 
 1342      6F6C5265 
 1343              	.LASF31:
 1344 0178 50574D5F 		.ascii	"PWM_1_Init\000"
 1344      315F496E 
 1344      697400
 1345              	.LASF38:
 1346 0183 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1346      4320342E 
 1346      392E3320 
 1346      32303135 
 1346      30333033 
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 42


 1347 01b6 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1347      20726576 
 1347      6973696F 
 1347      6E203232 
 1347      31323230 
 1348 01e9 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1348      66756E63 
 1348      74696F6E 
 1348      2D736563 
 1348      74696F6E 
 1349              	.LASF43:
 1350 0211 4379456E 		.ascii	"CyEnterCriticalSection\000"
 1350      74657243 
 1350      72697469 
 1350      63616C53 
 1350      65637469 
 1351              	.LASF8:
 1352 0228 756E7369 		.ascii	"unsigned int\000"
 1352      676E6564 
 1352      20696E74 
 1352      00
 1353              	.LASF44:
 1354 0235 43794578 		.ascii	"CyExitCriticalSection\000"
 1354      69744372 
 1354      69746963 
 1354      616C5365 
 1354      6374696F 
 1355              	.LASF39:
 1356 024b 47656E65 		.ascii	"Generated_Source\\PSoC5\\PWM_1.c\000"
 1356      72617465 
 1356      645F536F 
 1356      75726365 
 1356      5C50536F 
 1357              	.LASF32:
 1358 026a 72657375 		.ascii	"result\000"
 1358      6C7400
 1359              	.LASF26:
 1360 0271 50574D5F 		.ascii	"PWM_1_ReadStatusRegister\000"
 1360      315F5265 
 1360      61645374 
 1360      61747573 
 1360      52656769 
 1361              	.LASF33:
 1362 028a 6374726C 		.ascii	"ctrl\000"
 1362      00
 1363              	.LASF14:
 1364 028f 73697A65 		.ascii	"sizetype\000"
 1364      74797065 
 1364      00
 1365              	.LASF21:
 1366 0298 50574D5F 		.ascii	"PWM_1_WriteCompare\000"
 1366      315F5772 
 1366      69746543 
 1366      6F6D7061 
 1366      726500
 1367              	.LASF6:
 1368 02ab 6C6F6E67 		.ascii	"long long int\000"
ARM GAS  C:\Users\LL_W530\AppData\Local\Temp\ccRoNKDB.s 			page 43


 1368      206C6F6E 
 1368      6720696E 
 1368      7400
 1369              	.LASF41:
 1370 02b9 50574D5F 		.ascii	"PWM_1_ReadControlRegister\000"
 1370      315F5265 
 1370      6164436F 
 1370      6E74726F 
 1370      6C526567 
 1371              	.LASF24:
 1372 02d3 696E7465 		.ascii	"interruptMode\000"
 1372      72727570 
 1372      744D6F64 
 1372      6500
 1373              	.LASF18:
 1374 02e1 50574D5F 		.ascii	"PWM_1_WritePeriod\000"
 1374      315F5772 
 1374      69746550 
 1374      6572696F 
 1374      6400
 1375              	.LASF25:
 1376 02f3 50574D5F 		.ascii	"PWM_1_ReadCounter\000"
 1376      315F5265 
 1376      6164436F 
 1376      756E7465 
 1376      7200
 1377              	.LASF16:
 1378 0305 50574D5F 		.ascii	"PWM_1_Stop\000"
 1378      315F5374 
 1378      6F7000
 1379              	.LASF4:
 1380 0310 6C6F6E67 		.ascii	"long int\000"
 1380      20696E74 
 1380      00
 1381              	.LASF11:
 1382 0319 63686172 		.ascii	"char\000"
 1382      00
 1383              	.LASF0:
 1384 031e 7369676E 		.ascii	"signed char\000"
 1384      65642063 
 1384      68617200 
 1385              	.LASF22:
 1386 032a 636F6D70 		.ascii	"compare\000"
 1386      61726500 
 1387              	.LASF35:
 1388 0332 50574D5F 		.ascii	"PWM_1_Start\000"
 1388      315F5374 
 1388      61727400 
 1389              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
